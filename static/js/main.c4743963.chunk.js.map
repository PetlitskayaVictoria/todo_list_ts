{"version":3,"sources":["Todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Todolist","props","useState","title","setTitle","error","setError","createTask","trim","addTask","id","tasks","map","t","key","className","isDone","type","checked","onChange","e","changeStatus","currentTarget","onClick","removeTask","removeTodoList","value","event","onKeyPress","onBlur","filter","changeFilter","App","toDoListID1","v1","toDoListID2","todoLists","setTodoLists","setTasks","taskId","todoListID","todoListTasks","newTask","updatedTasks","newFilterValue","todoList","find","tl","newTasks","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.c4743963.chunk.js","sourcesContent":["import React, {useState, KeyboardEvent, ChangeEvent} from \"react\";\nimport {FilterValuesType, TaskType} from \"../App\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n    tasks: Array<TaskType>\n    removeTask: (taskId: string, todoListID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\n    changeStatus: (taskId: string, isDone: boolean, todoListID: string) => void\n    removeTodoList: (todoListID: string) => void\n}\n\nfunction Todolist(props: TodoListPropsType) {\n    const [title, setTitle] = useState<string>(\"\")\n    const [error, setError] = useState<string | null>(null)\n    const createTask = () => {\n        if (title.trim()) {\n            props.addTask(title, props.id)\n            setTitle(\"\")\n        } else {\n            setTitle(\"\")\n            setError(\"Name is required\")\n        }\n    }\n    const changeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n        setError(null)\n    }\n    const onKeyPressAddTask = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === \"Enter\") createTask()\n    }\n\n    const tasks = props.tasks.map(t => {\n        const removeTask = () => {\n            props.removeTask(t.id, props.id)\n        }\n\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n            props.changeStatus(t.id, e.currentTarget.checked, props.id)\n        }\n\n        return (\n            <li key={t.id} className={t.isDone ? \"isDone\" : \"\"}>\n                <input type=\"checkbox\"\n                       checked={t.isDone}\n                       onChange={changeStatus}\n                />\n                <span>{t.title}</span>\n                <button onClick={removeTask}>X</button>\n            </li>\n        )\n    })\n\n    return (\n        <div>\n            <h3>{props.title}<button onClick={ () => {\n                props.removeTodoList(props.id)\n            }}>x</button></h3>\n            <div>\n\n                <input className={error ? \"error\" : \"\"}\n                       value={title}\n                       onChange={changeInputValue}\n                       onKeyPress={onKeyPressAddTask}\n                       onBlur={() => {setError(null)}}\n\n                />\n                <button onClick={createTask}>+</button>\n                { error && <div className={\"errorMessage\"}>{error}</div>}\n\n            </div>\n            <ul>\n                {tasks}\n            </ul>\n            <div>\n                <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\n                        onClick={() => {\n                            props.changeFilter(\"all\", props.id)\n                        }}>All\n                </button>\n                <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\n                        onClick={() => {\n                            props.changeFilter(\"active\", props.id)\n                        }}>Active\n                </button>\n                <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\n                        onClick={() => {\n                            props.changeFilter(\"completed\", props.id)\n                        }}>Completed\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Todolist\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Todolist from \"./Todolist/Todolist\";\r\nimport {v1} from \"uuid\";\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n\r\n}\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nfunction App() {\r\n\r\n    // let [tasks, setTasks] = useState<Array<TaskType>>([\r\n    //     {id : v1(), title : \"JS\", isDone : true},\r\n    //     {id : v1(), title : \"CSS\", isDone : false},\r\n    //     {id : v1(), title : \"React\", isDone : false},\r\n    //     {id : v1(), title : \"Angular\", isDone : false},\r\n    //     {id : v1(), title : \"Java\", isDone : true},\r\n    // ])\r\n    const toDoListID1 = v1()\r\n    const toDoListID2 = v1()\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n            {id : toDoListID1, title : \"What to learn\", filter : \"all\"},\r\n            {id : toDoListID2, title : \"What to buy\", filter : \"all\"}\r\n        ]\r\n    )\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>(\r\n        {\r\n            [toDoListID1] : [\r\n                {id : v1(), title : \"JS\", isDone : true},\r\n                {id : v1(), title : \"CSS\", isDone : false},\r\n                {id : v1(), title : \"React\", isDone : false},\r\n                {id : v1(), title : \"Angular\", isDone : false},\r\n                {id : v1(), title : \"Java\", isDone : true},\r\n            ],\r\n            [toDoListID2] : [\r\n                {id : v1(), title : \"Books\", isDone : true},\r\n                {id : v1(), title : \"Cake\", isDone : false},\r\n            ]\r\n        }\r\n    )\r\n\r\n    // const [filter, setFilter] = useState<FilterValuesType>(\"all\")\r\n\r\n    function removeTask(taskId: string, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask = {\r\n            id : v1(),\r\n            title : title,\r\n            isDone : false\r\n        }\r\n\r\n        const updatedTasks = tasks[todoListID]\r\n        tasks[todoListID] = [newTask, ...updatedTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeFilter(newFilterValue: FilterValuesType, todoListID: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) todoList.filter = newFilterValue\r\n        setTodoLists([...todoLists])\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, todoListID: string) {\r\n        // const task = tasks.find(t => t.id === taskId)\r\n        //\r\n        // if (task) {\r\n        //     task.isDone = isDone\r\n        // }\r\n        // setTasks([...tasks])\r\n\r\n        const newTasks = tasks[todoListID].map(t => {\r\n                if (t.id === taskId) {\r\n                    return {...t, isDone : isDone}\r\n                } else {\r\n                    return t\r\n                }\r\n            }\r\n        )\r\n        tasks[todoListID] = newTasks\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTodoList (todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            {\r\n\r\n                todoLists.map(tl => {\r\n                    let todoListTasks = tasks[tl.id];\r\n                    if(tl.filter === \"active\") {\r\n                        todoListTasks = tasks[tl.id].filter( t => !t.isDone)\r\n                    } else if (tl.filter === \"completed\") {\r\n                        todoListTasks = tasks[tl.id].filter( t => t.isDone)\r\n                    }\r\n                    return <Todolist key={tl.id}\r\n                                     id={tl.id}\r\n                                     title={tl.title}\r\n                                     tasks={todoListTasks}\r\n                                     removeTask={removeTask}\r\n                                     addTask={addTask}\r\n                                     changeFilter={changeFilter}\r\n                                     changeStatus={changeStatus}\r\n                                     filter={tl.filter}\r\n                                     removeTodoList={removeTodoList}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}