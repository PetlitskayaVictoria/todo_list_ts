{"version":3,"sources":["AddItemForm.tsx","Todolist/EditableSpan.tsx","Todolist/Todolist.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["AddItemForm","props","useState","error","setError","title","setTitle","createItem","trim","className","value","onChange","event","currentTarget","onKeyPress","key","onBlur","onClick","EditableSpan","editMode","setEditMode","editModeOff","changeTitle","autoFocus","onDoubleClick","Todolist","tasks","map","t","id","isDone","type","checked","e","changeStatus","changeTaskTitle","removeTask","changeTodoListTitle","removeTodoList","addTask","filter","changeFilter","App","toDoListID1","v1","toDoListID2","todoLists","setTodoLists","setTasks","taskId","todoListID","todoListTasks","newTask","updatedTasks","newFilterValue","todoList","find","tl","newTasks","todoListId","task","newTodoList","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.7ae71f4c.chunk.js","sourcesContent":["import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\n\ntype AddItemFormType = {\n    createItem: (title: string) => void\n}\n\n\nfunction AddItemForm(props: AddItemFormType) {\n    const [error, setError] = useState<string | null>(null)\n    const [title, setTitle] = useState<string>(\"\")\n\n    const createItem = () => {\n        if (title.trim()) {\n            props.createItem(title)\n            setTitle(\"\")\n        } else {\n            setTitle(\"\")\n            setError(\"Name is required\")\n        }\n    }\n\n    const changeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n        setError(null)\n    }\n    const onKeyPressAddTask = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === \"Enter\") createItem()\n    }\n\n    return (\n        <div>\n            <input className={error ? \"error\" : \"\"}\n                   value={title}\n                   onChange={changeInputValue}\n                   onKeyPress={onKeyPressAddTask}\n                   onBlur={() => {setError(null)}}\n\n            />\n            <button onClick={createItem}>+</button>\n            { error && <div className={\"errorMessage\"}>{error}</div>}\n        </div>\n    )\n}\n\nexport default AddItemForm;\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\n\ntype EditableSpanType = {\n    title: string\n    changeTitle: (title: string) => void\n}\n\nfunction EditableSpan (props: EditableSpanType) {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n    const editModeOn = () => {\n        setEditMode(true)\n    }\n    const editModeOff = () => {\n        props.changeTitle(title)\n        setEditMode(false)\n    }\n\n    const saveOnClick = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === \"Enter\") {\n            editModeOff()\n        }\n    }\n\n    const changeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n    }\n\n\n    return (\n        editMode ? <input value={title}\n                          onChange={changeInputValue}\n                          onBlur={editModeOff}\n                          autoFocus={true}\n                          onKeyPress={saveOnClick}\n            /> :\n            <span onDoubleClick={editModeOn}>{props.title}</span>\n    )\n}\n\nexport default EditableSpan\n","import React, {ChangeEvent} from \"react\";\nimport {FilterValuesType, TaskType} from \"../App\";\nimport AddItemForm from \"../AddItemForm\";\nimport EditableSpan from \"./EditableSpan\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n    tasks: Array<TaskType>\n    removeTask: (taskId: string, todoListID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\n    changeStatus: (taskId: string, isDone: boolean, todoListID: string) => void\n    removeTodoList: (todoListID: string) => void\n    changeTaskTitle: (title: string, taskId: string, todoListId: string) => void\n    changeTodoListTitle: (title: string, todoListId: string) => void\n}\n\nfunction Todolist(props: TodoListPropsType) {\n    const createTask = (title: string) => {\n        props.addTask(title, props.id)\n    }\n\n    const changeTodoListTitle = (title: string) => {\n        props.changeTodoListTitle(title, props.id)\n    }\n\n    const tasks = props.tasks.map(t => {\n        const removeTask = () => {\n            props.removeTask(t.id, props.id)\n        }\n\n        const changeStatus = (e: ChangeEvent<HTMLInputElement>) => {\n            props.changeStatus(t.id, e.currentTarget.checked, props.id)\n        }\n\n        const changeTaskTitle = (title: string) => {\n            props.changeTaskTitle(title, t.id, props.id)\n        }\n\n        return (\n            <li key={t.id} className={t.isDone ? \"isDone\" : \"\"}>\n                <input type=\"checkbox\"\n                       checked={t.isDone}\n                       onChange={changeStatus}\n                />\n                <EditableSpan title={t.title} changeTitle={changeTaskTitle}/>\n                <button onClick={removeTask}>X</button>\n            </li>\n        )\n    })\n\n    return (\n        <div>\n            <h3><EditableSpan title={props.title} changeTitle={changeTodoListTitle} /><button onClick={ () => {\n                props.removeTodoList(props.id)\n            }}>x</button></h3>\n            <AddItemForm createItem={createTask}/>\n            <ul>\n                {tasks}\n            </ul>\n            <div>\n                <button className={props.filter === 'all' ? \"active-filter\" : \"\"}\n                        onClick={() => {\n                            props.changeFilter(\"all\", props.id)\n                        }}>All\n                </button>\n                <button className={props.filter === 'active' ? \"active-filter\" : \"\"}\n                        onClick={() => {\n                            props.changeFilter(\"active\", props.id)\n                        }}>Active\n                </button>\n                <button className={props.filter === 'completed' ? \"active-filter\" : \"\"}\n                        onClick={() => {\n                            props.changeFilter(\"completed\", props.id)\n                        }}>Completed\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default Todolist\n","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport Todolist from \"./Todolist/Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\n\r\ntype TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\ntype TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nfunction App() {\r\n\r\n    const toDoListID1 = v1()\r\n    const toDoListID2 = v1()\r\n    const [todoLists, setTodoLists] = useState<Array<TodoListType>>([\r\n            {id : toDoListID1, title : \"What to learn\", filter : \"all\"},\r\n            {id : toDoListID2, title : \"What to buy\", filter : \"all\"}\r\n        ]\r\n    )\r\n\r\n    const [tasks, setTasks] = useState<TaskStateType>(\r\n        {\r\n            [toDoListID1] : [\r\n                {id : v1(), title : \"JS\", isDone : true},\r\n                {id : v1(), title : \"CSS\", isDone : false},\r\n                {id : v1(), title : \"React\", isDone : false},\r\n                {id : v1(), title : \"Angular\", isDone : false},\r\n                {id : v1(), title : \"Java\", isDone : true},\r\n            ],\r\n            [toDoListID2] : [\r\n                {id : v1(), title : \"Books\", isDone : true},\r\n                {id : v1(), title : \"Cake\", isDone : false},\r\n            ]\r\n        }\r\n    )\r\n\r\n    function removeTask(taskId: string, todoListID: string) {\r\n        const todoListTasks = tasks[todoListID]\r\n        tasks[todoListID] = todoListTasks.filter(t => t.id !== taskId)\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function addTask(title: string, todoListID: string) {\r\n        const newTask = {\r\n            id : v1(),\r\n            title : title,\r\n            isDone : false\r\n        }\r\n\r\n        const updatedTasks = tasks[todoListID]\r\n        tasks[todoListID] = [newTask, ...updatedTasks]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeFilter(newFilterValue: FilterValuesType, todoListID: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListID)\r\n        if (todoList) todoList.filter = newFilterValue\r\n        setTodoLists([...todoLists])\r\n    }\r\n\r\n    function changeStatus(taskId: string, isDone: boolean, todoListID: string) {\r\n\r\n        const newTasks = tasks[todoListID].map(t => {\r\n                if (t.id === taskId) {\r\n                    return {...t, isDone : isDone}\r\n                } else {\r\n                    return t\r\n                }\r\n            }\r\n        )\r\n        tasks[todoListID] = newTasks\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function removeTodoList (todoListID: string) {\r\n        setTodoLists(todoLists.filter(tl => tl.id !== todoListID))\r\n        delete tasks[todoListID]\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function createTodoList (title: string) {\r\n        const newTodoList: TodoListType = {\r\n            id: v1(),\r\n            title: title,\r\n            filter: \"all\"\r\n        }\r\n        setTodoLists([newTodoList, ...todoLists])\r\n        setTasks({...tasks, [newTodoList.id] : []})\r\n    }\r\n\r\n    function changeTaskTitle (title: string, taskId: string, todoListId: string) {\r\n        const task = tasks[todoListId].find(t => t.id === taskId)\r\n        if (task) task.title = title\r\n        setTasks({...tasks})\r\n    }\r\n\r\n    function changeTodoListTitle (title: string, todoListId: string) {\r\n        const todoList = todoLists.find(tl => tl.id === todoListId)\r\n        if (todoList) todoList.title = title\r\n        setTodoLists([...todoLists])\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AddItemForm createItem={createTodoList} />\r\n            {\r\n                todoLists.map(tl => {\r\n                    let todoListTasks = tasks[tl.id];\r\n                    if(tl.filter === \"active\") {\r\n                        todoListTasks = tasks[tl.id].filter( t => !t.isDone)\r\n                    } else if (tl.filter === \"completed\") {\r\n                        todoListTasks = tasks[tl.id].filter( t => t.isDone)\r\n                    }\r\n                    return <Todolist key={tl.id}\r\n                                     id={tl.id}\r\n                                     title={tl.title}\r\n                                     tasks={todoListTasks}\r\n                                     removeTask={removeTask}\r\n                                     addTask={addTask}\r\n                                     changeFilter={changeFilter}\r\n                                     changeStatus={changeStatus}\r\n                                     filter={tl.filter}\r\n                                     removeTodoList={removeTodoList}\r\n                                     changeTaskTitle={changeTaskTitle}\r\n                                     changeTodoListTitle={changeTodoListTitle}\r\n                    />\r\n                })\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />,  document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}