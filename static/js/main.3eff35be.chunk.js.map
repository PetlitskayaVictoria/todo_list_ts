{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","features/TodolistLists/TodoList/tl-reducer.ts","features/TodolistLists/TodoList/Task/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistLists/TodoList/Task/Task.tsx","features/TodolistLists/TodoList/Todolist.tsx","features/TodolistLists/TodolistLists.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todolistId","title","put","get","post","delete","tasksAPI","taskId","model","initialState","changeFilterAC","id","newValue","type","deleteTaskTC","dispatch","then","res","data","resultCode","todoListId","removeTaskAC","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","description","status","priority","startDate","deadline","updateTaskAC","AddItemForm","React","memo","props","useState","error","setError","setTitle","createItem","trim","TextField","variant","value","onChange","event","currentTarget","onKeyPress","key","onBlur","helperText","label","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","editModeOff","changeTitle","autoFocus","onDoubleClick","Task","useDispatch","changeStatus","useCallback","e","checked","Completed","New","changeTaskTitle","className","Checkbox","color","Delete","Todolist","todoList","useSelector","state","todoLists","filter","tl","useEffect","items","allToDoListTasks","todoListTasks","createTask","item","addTaskTC","changeTodoListTitle","changeTodolistTitleAC","changeTodolistTitleTC","removeTodoList","map","Button","size","TodolistsList","removeTask","todoListID","changeFilter","newFilterValue","createTodoList","createTodoListTC","Grid","container","style","padding","spacing","Paper","elevation","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","rootReducer","combineReducers","action","stateCopy","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.3eff35be.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '9fa0e134-93f8-4f6c-b99f-9c479847d776'\n    }\n})\n\n// api\n\nexport const todolistAPI = {\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title})\n    },\n    getTodoLists() {\n        return instance.get<Array<TodolistType>>(`todo-lists`)\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\n    }\n}\nexport const tasksAPI = {\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksType>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    }\n}\n\n// types\n\nexport type TodolistType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\ntype ResponseType<D> = {\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress= 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    High = 2,\n    Urgently = 3,\n    Later = 4\n}\ntype TaskType= {\n    id: string\n    title: string\n    description: string\n    todoListId: string\n    order: number\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    addedDate: string\n}\ntype GetTasksType = {\n    items: Array<TaskType>\n    totalCount: number\n    error: string | null\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n\n","import {todolistAPI, TodolistType} from \"../../../api/todolist-api\";\nimport {AppRootStateType} from \"../../../app/store\";\nimport {Dispatch} from \"redux\";\n\nlet initialState: Array<TodolistDomainType> = []\n\nexport const todoListReducer = (state: Array<TodolistDomainType> = initialState, action: ActionsType): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case 'ADD-TODOLIST':\n            return [{...action.todoList, filter : \"all\"}, ...state]\n        case 'REMOVE-TODOLIST':\n            return state.filter(tl => tl.id !== action.todolistId)\n        case 'CHANGE-FILTER':\n            return state.map(tl => {return tl.id === action.id ? {...tl, filter : action.newValue} : tl})\n        case 'CHANGE-TODOLIST-TITLE':\n            return state.map(tl => {return tl.id === action.id ? {...tl, title : action.title} : tl})\n        case 'SET_TODO_LISTS':\n            return action.todoLists.map((tl) => ({...tl, filter: \"all\"}))\n        default:\n            return state\n    }\n}\n\n// actions\n\nexport const removeTodolistAC = (todolistId: string) => ({type: 'REMOVE-TODOLIST', todolistId} as const)\nexport const addTodolistAC = (todoList: TodolistType): AddTodoListActionType => ({type: 'ADD-TODOLIST', todoList} as const)\nexport const changeTodolistTitleAC = (title: string, id: string) => ({type: 'CHANGE-TODOLIST-TITLE', id, title} as const)\nexport const changeFilterAC = (id: string, newValue: FilterValuesType) => ({type: 'CHANGE-FILTER', id, newValue} as const)\nexport const setTodoListsAC = (todoLists: Array<TodolistType>): SetTodoListsACType => ({type: 'SET_TODO_LISTS', todoLists} as const)\n\n// thunks\n\nexport const getTodoListsTC = () =>\n    (dispatch: Dispatch<ActionsType>) => {\n    todolistAPI.getTodoLists().then((res) => {\n        dispatch(setTodoListsAC(res.data))\n    })\n}\nexport const createTodoListTC = (title: string) =>\n    (dispatch: Dispatch<ActionsType>) => {\n    todolistAPI.createTodolist(title).then((res) => {\n        if (res.data.resultCode === 0) {\n            dispatch(addTodolistAC(res.data.data.item))\n        }\n    })\n}\nexport const deleteTodoListTC = (todoListId: string) =>\n    (dispatch: Dispatch<ActionsType>) => {\n    todolistAPI.deleteTodolist(todoListId).then((res) => {\n        if (res.data.resultCode === 0) {\n            dispatch(removeTodolistAC(todoListId))\n        }\n    })\n}\nexport const changeTodolistTitleTC = (todoListId: string, title: string) =>\n    (dispatch: Dispatch<ActionsType>) => {\n    todolistAPI.updateTodolist(todoListId, title).then((res) => {\n        if (res.data.resultCode === 0) {\n            dispatch(changeTodolistTitleAC(title, todoListId))\n        }\n    })\n}\n\n// types\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\nexport type TodolistDomainType = TodolistType & {filter: FilterValuesType}\n\nexport type RemoveTodoListActionType = {\n    type: 'REMOVE-TODOLIST',\n    todolistId: string\n}\nexport type AddTodoListActionType = {\n    type: 'ADD-TODOLIST',\n    todoList: TodolistType\n}\nexport type SetTodoListsACType = {\n    type: 'SET_TODO_LISTS',\n    todoLists: Array<TodolistType>\n}\nexport type ActionsType =\n    | RemoveTodoListActionType\n    | AddTodoListActionType\n    | SetTodoListsACType\n    | ReturnType<typeof changeTodolistTitleAC>\n    | ReturnType<typeof changeFilterAC>\n\n\n\n","import {TaskStateType} from \"../../../../app/App\";\nimport {\n    AddTodoListActionType,\n    RemoveTodoListActionType,\n    SetTodoListsACType,\n} from \"../tl-reducer\";\nimport {TaskPriorities, tasksAPI, TaskStatuses, UpdateTaskModelType} from \"../../../../api/todolist-api\";\nimport {AppRootStateType} from \"../../../../app/store\";\nimport {Dispatch} from \"redux\";\n\nlet initialState: TaskStateType = {}\n\nexport const tasksReducer = (state = initialState, action: ActionsType): TaskStateType => {\n    switch (action.type) {\n        case \"SET_TASKS\":\n            return {...state, [action.todoListId]: action.tasks}\n        case 'REMOVE_TASK':\n            return {...state, [action.todoListId]: state[action.todoListId].filter(t => t.id !== action.taskId)}\n        case 'ADD_TASK':\n            return {...state, [action.task.todoListId] : [action.task, ...state[action.task.todoListId]]}\n        case \"UPDATE_TASK\":\n            return {...state, [action.todoListId]: state[action.todoListId].map(\n                (t) => {if (t.id === action.taskId) {return {...t, ...action.domainModel}} else {return t}})}\n        case \"ADD-TODOLIST\":\n            return {...state, [action.todoList.id] : []}\n        case \"REMOVE-TODOLIST\": {\n            const stateCopy = {...state}\n            delete stateCopy[action.todolistId]\n            return stateCopy\n        }\n        case \"SET_TODO_LISTS\": {\n            const stateCopy = {...state}\n            action.todoLists.forEach((tl) => {stateCopy[tl.id] = []})\n            return stateCopy\n        }\n        default:\n            return state\n    }\n}\n\n// actions\n\nexport const removeTaskAC = (taskId: string, todoListId: string) => ({\n    type : 'REMOVE_TASK',\n    taskId,\n    todoListId\n} as const)\nexport const addTaskAC = (task: TaskType) => ({type : 'ADD_TASK', task} as const)\nexport const updateTaskAC = (taskId: string, domainModel: UpdateDomainTaskModelType, todoListId: string) => ({\n    type : 'UPDATE_TASK', taskId : taskId, domainModel, todoListId\n} as const)\nexport const setTasksAC = (todoListId: string, tasks: Array<TaskType>) => ({\n    type : \"SET_TASKS\",\n    todoListId,\n    tasks\n} as const)\n\n// thunks\n\nexport const getTasksTC = (todolistId: string) =>\n    (dispatch: Dispatch<ActionsType>) => {\n        tasksAPI.getTasks(todolistId).then((res) => {\n            dispatch(setTasksAC(todolistId, res.data.items))\n        })\n    }\nexport const deleteTaskTC = (todolistId: string, taskId: string) =>\n    (dispatch: Dispatch<ActionsType>) => {\n        tasksAPI.deleteTask(todolistId, taskId).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(removeTaskAC(taskId, todolistId))\n            }\n        })\n    }\nexport const addTaskTC = (todolistId: string, title: string) =>\n    (dispatch: Dispatch<ActionsType>) => {\n        tasksAPI.createTask(todolistId, title).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(addTaskAC(res.data.data.item))\n            }\n        })\n    }\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType) =>\n    (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\n        const state = getState()\n        const task = state.tasks[todolistId].find((t) => t.id === taskId)\n        if (!task) {return}\n\n        const apiModel: UpdateTaskModelType = {\n            title : task.title,\n            description : task.description,\n            status : task.status,\n            priority : task.priority,\n            startDate : task.startDate,\n            deadline : task.deadline,\n            ...domainModel\n        }\n\n        tasksAPI.updateTask(todolistId, taskId, apiModel).then((res) => {\n            dispatch(updateTaskAC(taskId, domainModel, todolistId))\n        })\n    }\n\n// types\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TaskType = {\n    id: string\n    title: string\n    description: string\n    todoListId: string\n    order: number\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    addedDate: string\n}\nexport type ActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | ReturnType<typeof setTasksAC>\n    | RemoveTodoListActionType\n    | SetTodoListsACType\n    | AddTodoListActionType\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\nexport type AddItemFormType = {\n    createItem: (title: string) => void\n}\n\n\nconst AddItemForm = React.memo((props: AddItemFormType) =>  {\n    const [error, setError] = useState<string | null>(null)\n    const [title, setTitle] = useState<string>(\"\")\n\n    const createItem = () => {\n        if (title.trim()) {\n            props.createItem(title)\n            setTitle(\"\")\n        } else {\n            setTitle(\"\")\n            setError(\"Name is required\")\n        }\n    }\n\n    const changeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n        // setError(null)\n    }\n    const onKeyPressAddTask = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) setError(null)\n        if (event.key === \"Enter\") createItem()\n    }\n\n    return (\n        <div>\n            <TextField variant={\"outlined\"}\n                       value={title}\n                       onChange={changeInputValue}\n                       onKeyPress={onKeyPressAddTask}\n                       onBlur={() => {setError(null)}}\n                       helperText={error ? \"Name is required\" : \"\"}\n                       label={\"Title\"}\n                       error={!!error}\n            />\n\n            <IconButton onClick={createItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})\n\nexport default AddItemForm;\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanType = {\n    title: string\n    changeTitle: (title: string) => void\n}\n\nconst EditableSpan = React.memo((props: EditableSpanType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n    const editModeOn = () => {\n        setEditMode(true)\n    }\n    const editModeOff = () => {\n        props.changeTitle(title)\n        setEditMode(false)\n    }\n\n    const saveOnClick = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === \"Enter\") {\n            editModeOff()\n        }\n    }\n\n    const changeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n    }\n\n\n    return (\n        editMode ? <TextField\n                value={title}\n                onChange={changeInputValue}\n                onBlur={editModeOff}\n                autoFocus={true}\n                onKeyPress={saveOnClick}/>\n            :\n            <span onDoubleClick={editModeOn}>{props.title}</span>\n    )\n})\n\nexport default EditableSpan\n","import React, {ChangeEvent, useCallback} from \"react\";\nimport {\n    deleteTaskTC, updateTaskTC\n} from \"./tasks-reducer\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {TaskStatuses} from \"../../../../api/todolist-api\";\n\nexport type TaskPropsType = {\n    id: string\n    todoListId: string\n    title: string\n    status: TaskStatuses\n}\n\nconst Task = React.memo((props: TaskPropsType) => {\n    const dispatch = useDispatch()\n    const removeTask = () => {\n        dispatch(deleteTaskTC(props.todoListId, props.id))\n    }\n\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\n\n        dispatch(updateTaskTC(props.todoListId, props.id, {status}))\n    }, [dispatch, props.id, props.todoListId])\n\n    const changeTaskTitle = useCallback((title: string) => {\n        dispatch(updateTaskTC(props.todoListId, props.id, {title}))\n    }, [dispatch, props.id, props.todoListId])\n\n    return (\n        <div className={props.status === TaskStatuses.Completed ? \"isDone\" : \"\"}>\n            <Checkbox checked={props.status === TaskStatuses.Completed}\n                      onChange={changeStatus}\n                      color={\"secondary\"}\n            ></Checkbox>\n            <EditableSpan title={props.title} changeTitle={changeTaskTitle}/>\n            <IconButton onClick={removeTask}>\n                <Delete />\n            </IconButton>\n        </div>\n    )\n})\n\nexport default Task\n","import React, {useCallback, useEffect} from \"react\";\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\nimport EditableSpan from \"../../../components/EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../app/store\";\nimport {addTaskTC, getTasksTC, TaskType} from \"./Task/tasks-reducer\";\nimport {\n    changeFilterAC,\n    changeTodolistTitleTC, deleteTodoListTC,\n    FilterValuesType,\n    TodolistDomainType\n} from \"./tl-reducer\";\nimport Task from \"./Task/Task\";\nimport {TaskStatuses} from \"../../../api/todolist-api\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n    tasks: Array<TaskType>\n    removeTask: (taskId: string, todoListID: string) => void\n    changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\n}\n\nconst Todolist = React.memo((props: TodoListPropsType) => {\n\n    let todoList = useSelector<AppRootStateType, TodolistDomainType>(state => state.todoLists.filter(tl => tl.id === props.id)[0])\n    let tasks = useSelector<AppRootStateType, TaskType[]>(state => state.tasks[props.id])\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getTasksTC(props.id))\n    }, [])\n\n    let allToDoListTasks = tasks;\n    let todoListTasks = allToDoListTasks;\n    if (props.filter === \"active\") {\n        todoListTasks = allToDoListTasks.filter(t => t.status !== TaskStatuses.Completed)\n    } else if (props.filter === \"completed\") {\n        todoListTasks = allToDoListTasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    const createTask = useCallback((title: string) => {\n        dispatch(addTaskTC(todoList.id, title))\n    }, [dispatch])\n\n    const changeTodoListTitle = useCallback((title: string) => {\n        dispatch(changeTodolistTitleTC(todoList.id, title))\n    }, [dispatch])\n\n    const removeTodoList = useCallback(() => {\n        dispatch(deleteTodoListTC(todoList.id))\n    }, [dispatch])\n\n    return (\n        <div>\n            <h3><EditableSpan title={todoList.title} changeTitle={changeTodoListTitle}/>\n                <IconButton onClick={removeTodoList}>\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemForm createItem={createTask}/>\n            <div>\n                {todoListTasks.map(t => {\n                    return <Task key={t.id}\n                                 id={t.id}\n                                 todoListId={props.id}\n                                 title={t.title}\n                                 status={t.status}\n                    />\n                })}\n            </div>\n            <div>\n                <Button color={todoList.filter === 'all' ? \"primary\" : \"default\"}\n                        variant={\"contained\"}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC(todoList.id, \"all\"))\n                        }}>All\n                </Button>\n                <Button color={todoList.filter === \"active\" ? \"primary\" : \"default\"}\n                        variant={\"contained\"}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC(todoList.id, \"active\"))\n                        }}>Active\n                </Button>\n                <Button color={todoList.filter === 'completed' ? \"primary\" : \"default\"}\n                        variant={\"contained\"}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC(todoList.id, \"completed\"))\n                        }}>Completed\n                </Button>\n            </div>\n        </div>\n    )\n})\n\nexport default Todolist\n","import React, {useCallback, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {\n    changeFilterAC,\n    createTodoListTC,\n    FilterValuesType,\n    getTodoListsTC,\n    TodolistDomainType\n} from \"./TodoList/tl-reducer\";\nimport {deleteTaskTC} from \"./TodoList/Task/tasks-reducer\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\nimport Todolist from \"./TodoList/Todolist\";\nimport App, {TaskStateType} from \"../../app/App\";\n\nconst TodolistsList: React.FC = () => {\n    const todoLists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todoLists)\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        dispatch(getTodoListsTC())\n    }, [])\n\n    const removeTask = useCallback((taskId: string, todoListID: string) => {\n        dispatch(deleteTaskTC(todoListID, taskId))\n    }, [dispatch])\n\n    const changeFilter = useCallback((newFilterValue: FilterValuesType, todoListID: string) => {\n        dispatch(changeFilterAC(todoListID, newFilterValue))\n    }, [dispatch])\n\n\n    const createTodoList = useCallback((title: string) => {\n        dispatch(createTodoListTC(title))\n    }, [dispatch])\n\n    return (\n        <>\n            <Grid container style={{padding : \"30px 0\"}}>\n                <AddItemForm createItem={createTodoList}/>\n            </Grid>\n            <Grid container spacing={4}>\n                {\n                    todoLists.map(tl => {\n                        let allToDoListTasks = tasks[tl.id];\n\n                        return <Grid item key={tl.id}>\n                            <Paper elevation={3} style={{padding : \"25px\"}}>\n                                <Todolist id={tl.id}\n                                          title={tl.title}\n                                          tasks={allToDoListTasks}\n                                          removeTask={removeTask}\n                                          changeFilter={changeFilter}\n                                          filter={tl.filter}\n                                />\n                            </Paper>\n                        </Grid>\n                    })}\n            </Grid>\n        </>\n    )\n}\n\nexport default TodolistsList;\n","import React from 'react';\r\nimport './App.css';\r\nimport {AppBar, Button, Container, IconButton, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport TodolistsList from \"../features/TodolistLists/TodolistLists\";\r\nimport { TaskType } from '../features/TodolistLists/TodoList/Task/tasks-reducer';\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nfunction App() {\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <TodolistsList/>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from '../features/TodolistLists/TodoList/Task/tasks-reducer';\nimport {todoListReducer} from '../features/TodolistLists/TodoList/tl-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware from 'redux-thunk'\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todoLists: todoListReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <App />\r\n    </Provider>,  document.getElementById('root')\r\n\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}