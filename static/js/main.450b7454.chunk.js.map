{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistLists/TodoList/tl-reducer.ts","features/TodolistLists/TodoList/Task/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistLists/TodoList/Task/Task.tsx","features/TodolistLists/TodoList/Todolist.tsx","features/TodolistLists/TodolistLists.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todolistId","title","put","get","post","delete","tasksAPI","taskId","model","authAPI","params","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","setAppStatusAC","handleServerNetworkError","error","message","initialState","isLoggedIn","setIsLoggedInAC","value","type","status","isInitialized","changeFilterAC","id","newValue","changeTaskEntityStatusAC","todoListId","entityStatus","deleteTaskTC","then","res","resultCode","removeTaskAC","catch","updateTaskTC","domainModel","getState","task","tasks","find","t","apiModel","description","priority","startDate","deadline","updateTaskAC","finally","AddItemForm","React","memo","props","useState","setError","setTitle","createItem","trim","TextField","variant","onChange","event","currentTarget","onKeyPress","key","onBlur","helperText","label","disabled","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","editModeOff","changeTitle","autoFocus","onDoubleClick","Task","useDispatch","changeStatus","useCallback","e","checked","Completed","New","changeTaskTitle","className","Checkbox","color","Delete","Todolist","todoList","useSelector","state","todoLists","filter","tl","useEffect","items","allToDoListTasks","todoListTasks","createTask","item","addTaskTC","changeTodoListTitle","changeTodolistTitleAC","changeTodolistTitleTC","removeTodoList","map","Button","size","TodolistsList","auth","removeTask","todoListID","changeFilter","newFilterValue","createTodoList","createTodoListTC","Grid","container","style","padding","spacing","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","LinearProgress","Container","fixed","exact","path","render","from","top","textAlign","width","CircularProgress","rootReducer","combineReducers","action","stateCopy","forEach","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.450b7454.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '9fa0e134-93f8-4f6c-b99f-9c479847d776'\n    }\n})\n\n// api\n\nexport const todolistAPI = {\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title})\n    },\n    getTodoLists() {\n        return instance.get<Array<TodolistType>>(`todo-lists`)\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\n    }\n}\nexport const tasksAPI = {\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksType>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    }\n}\n\nexport const authAPI = {\n    login(params: LoginParamsType){\n        return instance.post<ResponseType<{userId: number}>>('auth/login', params)\n    },\n    me(){\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\n    },\n    logout(){\n        return instance.delete<ResponseType<{}>>('auth/login')\n    }\n}\n\n// types\n\nexport type TodolistType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress= 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    High = 2,\n    Urgently = 3,\n    Later = 4\n}\ntype TaskType= {\n    id: string\n    title: string\n    description: string\n    todoListId: string\n    order: number\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    addedDate: string\n}\ntype GetTasksType = {\n    items: Array<TaskType>\n    totalCount: number\n    error: string | null\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\n\n","import { setAppErrorAC, setAppStatusAC, SetAppStatusActionType } from '../app/app-reducer';\nimport { Dispatch } from 'redux';\nimport {SetAppErrorActionType} from \"../app/app-reducer\";\nimport { ResponseType } from \"./../api/todolist-api\"\n\n\n// generic function\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: ErrorUtilsDispatchType) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC(data.messages[0]))\n    } else {\n        dispatch(setAppErrorAC('Some error occurred'))\n    }\n    dispatch(setAppStatusAC('failed'))\n}\n\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\n    dispatch(setAppErrorAC(error.message))\n    dispatch(setAppStatusAC('failed'))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorActionType | SetAppStatusActionType>\n","import { Dispatch } from 'redux'\nimport { SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType } from '../../app/app-reducer'\nimport {authAPI} from \"../../api/todolist-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\n\nconst initialState = {\n    isLoggedIn: false\n}\ntype InitialStateType = typeof initialState\n\nexport const authReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'login/SET-IS-LOGGED-IN':\n            return {...state, isLoggedIn: action.value}\n        default:\n            return state\n    }\n}\n// actions\nexport const setIsLoggedInAC = (value: boolean) =>\n    ({type: 'login/SET-IS-LOGGED-IN', value} as const)\n\n// thunks\nexport const loginTC = (data: any) => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.login(data).then((res) => {\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true))\n            dispatch(setAppStatusAC('succeeded'))\n        } else {\n            handleServerAppError(res.data, dispatch)\n        }\n    }).catch((error) => {\n        handleServerNetworkError(error, dispatch)\n    })\n}\nexport const logoutTC = () => (dispatch: Dispatch<ActionsType>) => {\n    dispatch(setAppStatusAC('loading'))\n    authAPI.logout()\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC(false))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n\n// types\ntype ActionsType = ReturnType<typeof setIsLoggedInAC> | SetAppStatusActionType | SetAppErrorActionType\n","import {authAPI} from \"../api/todolist-api\";\nimport {Dispatch} from \"redux\";\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nconst initialState: InitialStateType = {\n    status : 'idle',\n    error : null,\n    isInitialized : false\n}\n\ntype InitialStateType = {\n    status: RequestStatusType\n    error: string | null\n    isInitialized: boolean\n}\n\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\n    switch (action.type) {\n        case 'APP/SET-STATUS':\n            return {...state, status : action.status}\n        case \"APP/SET-ERROR\":\n            return {...state, error : action.error}\n        case \"APP/SET_IS_INITIALIZED\": return {...state, isInitialized: action.isInitialized}\n        default:\n            return state\n    }\n}\n\nexport const setAppStatusAC = (status: RequestStatusType) => (\n    {type : 'APP/SET-STATUS', status} as const\n)\n\nexport const setAppErrorAC = (error: string | null) => (\n    {type : 'APP/SET-ERROR', error} as const\n)\nexport const setIsInitialized = (isInitialized: boolean) => (\n    {type : 'APP/SET_IS_INITIALIZED', isInitialized} as const\n)\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    authAPI.me().then(res => {\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC(true));\n        } else {\n            handleServerAppError(res.data, dispatch)\n        }\n    }).catch((error) => {\n        handleServerNetworkError(error, dispatch)\n    }).finally(() => {\n        dispatch(setIsInitialized(true))\n    })\n}\n\nexport type SetAppStatusACType = ReturnType<typeof setAppStatusAC>\nexport type SetAppErrorACType = ReturnType<typeof setAppErrorAC>\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\nexport type SetIsInitialized = ReturnType<typeof setIsInitialized>\ntype ActionsType =\n    | SetAppStatusACType\n    | SetAppErrorACType\n    | SetAppErrorActionType\n    | SetAppStatusActionType\n    | SetIsInitialized\n","import {todolistAPI, TodolistType} from \"../../../api/todolist-api\";\nimport {AppRootStateType, AppThunk} from \"../../../app/store\";\nimport {Dispatch} from \"redux\";\nimport {\n    RequestStatusType,\n    setAppErrorAC,\n    SetAppErrorACType,\n    setAppStatusAC,\n    SetAppStatusACType\n} from \"../../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\n\nlet initialState: Array<TodolistDomainType> = []\n\nexport const todoListReducer = (state: Array<TodolistDomainType> = initialState, action: TodolistActionsType): Array<TodolistDomainType> => {\n    switch (action.type) {\n        case 'ADD-TODOLIST':\n            return [{...action.todoList, filter : \"all\", entityStatus : 'idle'}, ...state]\n        case 'REMOVE-TODOLIST':\n            return state.filter(tl => tl.id !== action.todolistId)\n        case 'CHANGE-FILTER':\n            return state.map(tl => {\n                return tl.id === action.id ? {...tl, filter : action.newValue} : tl\n            })\n        case 'CHANGE-TODOLIST-TITLE':\n            return state.map(tl => {\n                return tl.id === action.id ? {...tl, title : action.title} : tl\n            })\n        case 'SET_TODO_LISTS':\n            return action.todoLists.map((tl) => ({...tl, filter : \"all\", entityStatus : 'idle'}))\n        case \"CHANGE_TODOLIST_ENTITY_STATUS\":\n            return state.map(tl => {\n                return tl.id === action.id ? {...tl, entityStatus : action.entityStatus} : tl\n            })\n        default:\n            return state\n    }\n}\n\n// actions\n\nexport const removeTodolistAC = (todolistId: string) => ({type : 'REMOVE-TODOLIST', todolistId} as const)\nexport const addTodolistAC = (todoList: TodolistType): AddTodoListActionType => ({\n    type : 'ADD-TODOLIST',\n    todoList\n} as const)\nexport const changeTodolistTitleAC = (title: string, id: string) => ({\n    type : 'CHANGE-TODOLIST-TITLE',\n    id,\n    title\n} as const)\nexport const changeFilterAC = (id: string, newValue: FilterValuesType) => ({\n    type : 'CHANGE-FILTER',\n    id,\n    newValue\n} as const)\nexport const setTodoListsAC = (todoLists: Array<TodolistType>): SetTodoListsACType => ({\n    type : 'SET_TODO_LISTS',\n    todoLists\n} as const)\nexport const changeTodolistEntityStatusAC = (id: string, entityStatus: RequestStatusType): ChangeTodolistEntityStatusACType => ({\n    type : 'CHANGE_TODOLIST_ENTITY_STATUS', id, entityStatus\n} as const)\n\n// thunks\n\nexport const getTodoListsTC = (): AppThunk =>\n    (dispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistAPI.getTodoLists().then((res) => {\n            dispatch(setTodoListsAC(res.data))\n            dispatch(setAppStatusAC('succeeded'))\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n    }\nexport const createTodoListTC = (title: string): AppThunk =>\n    (dispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistAPI.createTodolist(title).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(addTodolistAC(res.data.data.item))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n    }\nexport const deleteTodoListTC = (todoListId: string): AppThunk =>\n    (dispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        dispatch(changeTodolistEntityStatusAC(todoListId, 'loading'))\n        todolistAPI.deleteTodolist(todoListId).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(removeTodolistAC(todoListId))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n    }\nexport const changeTodolistTitleTC = (todoListId: string, title: string): AppThunk =>\n    (dispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        todolistAPI.updateTodolist(todoListId, title).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(changeTodolistTitleAC(title, todoListId))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n    }\n\n// types\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\nexport type TodolistDomainType = TodolistType & { filter: FilterValuesType, entityStatus: RequestStatusType }\n\nexport type RemoveTodoListActionType = {\n    type: 'REMOVE-TODOLIST',\n    todolistId: string\n}\nexport type AddTodoListActionType = {\n    type: 'ADD-TODOLIST',\n    todoList: TodolistType\n}\nexport type SetTodoListsACType = {\n    type: 'SET_TODO_LISTS',\n    todoLists: Array<TodolistType>\n}\nexport type ChangeTodolistEntityStatusACType = {\n    type: 'CHANGE_TODOLIST_ENTITY_STATUS',\n    id: string,\n    entityStatus: RequestStatusType\n}\nexport type TodolistActionsType =\n    | RemoveTodoListActionType\n    | AddTodoListActionType\n    | SetTodoListsACType\n    | ReturnType<typeof changeTodolistTitleAC>\n    | ReturnType<typeof changeFilterAC>\n    | SetAppStatusACType\n    | SetAppErrorACType\n    | ChangeTodolistEntityStatusACType\n\n\n\n","import {\n    AddTodoListActionType,\n    RemoveTodoListActionType,\n    SetTodoListsACType,\n} from \"../tl-reducer\";\nimport {TaskPriorities, tasksAPI, TaskStatuses, UpdateTaskModelType} from \"../../../../api/todolist-api\";\nimport {AppRootStateType, AppThunk} from \"../../../../app/store\";\nimport {Dispatch} from \"redux\";\nimport {RequestStatusType, SetAppErrorACType, setAppStatusAC, SetAppStatusACType} from \"../../../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../../utils/error-utils\";\n\nexport type TaskStateType = {\n    [key: string]: Array<TaskDomainType>\n}\nlet initialState: TaskStateType = {}\n\nexport const tasksReducer = (state = initialState, action: TaskActionsType): TaskStateType => {\n    switch (action.type) {\n        case \"SET_TASKS\":\n            return {...state, [action.todoListId] : action.tasks.map((t) => {return {...t, entityStatus : 'idle'}})}\n        case 'REMOVE_TASK':\n            return {...state, [action.todoListId] : state[action.todoListId].filter(t => t.id !== action.taskId)}\n        case 'ADD_TASK':\n            return {...state, [action.task.todoListId] : [{...action.task, entityStatus : 'idle'}, ...state[action.task.todoListId]]}\n        case \"UPDATE_TASK\":\n            return {\n                ...state, [action.todoListId] : state[action.todoListId].map(\n                    (t) => {\n                        if (t.id === action.taskId) {\n                            return {...t, ...action.domainModel}\n                        } else {\n                            return t\n                        }\n                    })\n            }\n        case \"ADD-TODOLIST\":\n            return {...state, [action.todoList.id] : []}\n        case \"REMOVE-TODOLIST\": {\n            const stateCopy = {...state}\n            delete stateCopy[action.todolistId]\n            return stateCopy\n        }\n        case \"SET_TODO_LISTS\": {\n            const stateCopy = {...state}\n            action.todoLists.forEach((tl) => {\n                stateCopy[tl.id] = []\n            })\n            return stateCopy\n        }\n        case \"CHANGE_TASK_ENTITY_STATUS\": return {\n            ...state, [action.todoListId] : state[action.todoListId].map(\n                (t) => {\n                    if (t.id === action.taskId) {\n                        return {...t, entityStatus: action.entityStatus}\n                    } else {\n                        return t\n                    }\n                })\n        }\n        default:\n            return state\n    }\n}\n\n// actions\n\nexport const removeTaskAC = (taskId: string, todoListId: string) => ({\n    type : 'REMOVE_TASK',\n    taskId,\n    todoListId\n} as const)\nexport const addTaskAC = (task: TaskType) => ({type : 'ADD_TASK', task} as const)\nexport const updateTaskAC = (taskId: string, domainModel: UpdateDomainTaskModelType, todoListId: string) => ({\n    type : 'UPDATE_TASK', taskId : taskId, domainModel, todoListId\n} as const)\nexport const setTasksAC = (todoListId: string, tasks: Array<TaskType>) => ({\n    type : \"SET_TASKS\",\n    todoListId,\n    tasks\n} as const)\nexport const changeTaskEntityStatusAC = (taskId: string, todoListId: string, entityStatus: RequestStatusType) => ({\n    type : 'CHANGE_TASK_ENTITY_STATUS', taskId, todoListId, entityStatus\n} as const)\n\n// thunks\n\nexport const getTasksTC = (todolistId: string): AppThunk =>\n    (dispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        tasksAPI.getTasks(todolistId).then((res) => {\n            dispatch(setTasksAC(todolistId, res.data.items))\n            dispatch(setAppStatusAC('succeeded'))\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n    }\nexport const deleteTaskTC = (todolistId: string, taskId: string): AppThunk =>\n    (dispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        dispatch(changeTaskEntityStatusAC(taskId, todolistId, \"loading\"))\n        tasksAPI.deleteTask(todolistId, taskId).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(removeTaskAC(taskId, todolistId))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n    }\nexport const addTaskTC = (todolistId: string, title: string): AppThunk =>\n    (dispatch) => {\n        dispatch(setAppStatusAC('loading'))\n        tasksAPI.createTask(todolistId, title).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(addTaskAC(res.data.data.item))\n                dispatch(setAppStatusAC('succeeded'))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n    }\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType): AppThunk =>\n    (dispatch, getState: () => AppRootStateType) => {\n        const state = getState()\n        const task = state.tasks[todolistId].find((t) => t.id === taskId)\n        if (!task) {\n            return\n        }\n\n        const apiModel: UpdateTaskModelType = {\n            title : task.title,\n            description : task.description,\n            status : task.status,\n            priority : task.priority,\n            startDate : task.startDate,\n            deadline : task.deadline,\n            ...domainModel\n        }\n        dispatch(setAppStatusAC('loading'))\n        dispatch(changeTaskEntityStatusAC(taskId, todolistId, \"loading\"))\n        tasksAPI.updateTask(todolistId, taskId, apiModel).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(updateTaskAC(taskId, domainModel, todolistId))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        }).finally(() => {\n            dispatch(setAppStatusAC('succeeded'))\n            dispatch(changeTaskEntityStatusAC(taskId, todolistId, \"succeeded\"))\n        })\n    }\n\n// types\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TaskType = {\n    id: string\n    title: string\n    description: string\n    todoListId: string\n    order: number\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    addedDate: string\n}\nexport type TaskDomainType = TaskType & {entityStatus: RequestStatusType}\nexport type TaskActionsType =\n    | ReturnType<typeof removeTaskAC>\n    | ReturnType<typeof addTaskAC>\n    | ReturnType<typeof updateTaskAC>\n    | ReturnType<typeof setTasksAC>\n    | RemoveTodoListActionType\n    | SetTodoListsACType\n    | AddTodoListActionType\n    | SetAppStatusACType\n    | SetAppErrorACType\n    | ReturnType<typeof changeTaskEntityStatusAC>\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\nexport type AddItemFormType = {\n    createItem: (title: string) => void\n    disabled?: boolean\n}\n\nconst AddItemForm = React.memo((props: AddItemFormType) =>  {\n    const [error, setError] = useState<string | null>(null)\n    const [title, setTitle] = useState<string>(\"\")\n\n    const createItem = () => {\n        if (title.trim()) {\n            props.createItem(title)\n            setTitle(\"\")\n        } else {\n            setTitle(\"\")\n            setError(\"Name is required\")\n        }\n    }\n\n    const changeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n        // setError(null)\n    }\n    const onKeyPressAddTask = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) setError(null)\n        if (event.key === \"Enter\") createItem()\n    }\n\n    return (\n        <div>\n            <TextField variant={\"outlined\"}\n                       value={title}\n                       onChange={changeInputValue}\n                       onKeyPress={onKeyPressAddTask}\n                       onBlur={() => {setError(null)}}\n                       helperText={error ? \"Name is required\" : \"\"}\n                       label={\"Title\"}\n                       error={!!error}\n                       disabled={props.disabled}\n            />\n\n            <IconButton onClick={createItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})\n\nexport default AddItemForm;\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanType = {\n    title: string\n    changeTitle: (title: string) => void\n    disabled?: boolean\n}\n\nconst EditableSpan = React.memo((props: EditableSpanType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n    const editModeOn = () => {\n        setEditMode(true)\n    }\n    const editModeOff = () => {\n        props.changeTitle(title)\n        setEditMode(false)\n    }\n\n    const saveOnClick = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === \"Enter\") {\n            editModeOff()\n        }\n    }\n\n    const changeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n    }\n\n\n    return (\n        editMode && !props.disabled ? <TextField\n                value={title}\n                onChange={changeInputValue}\n                onBlur={editModeOff}\n                autoFocus={true}\n                onKeyPress={saveOnClick}/>\n            :\n            <span onDoubleClick={editModeOn}>{props.title}</span>\n    )\n})\n\nexport default EditableSpan\n","import React, {ChangeEvent, useCallback} from \"react\";\nimport {\n    deleteTaskTC, updateTaskTC\n} from \"./tasks-reducer\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {TaskStatuses} from \"../../../../api/todolist-api\";\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\n\nexport type TaskPropsType = {\n    id: string\n    todoListId: string\n    title: string\n    entityStatus: RequestStatusType\n    status: TaskStatuses\n}\n\nconst Task = React.memo((props: TaskPropsType) => {\n    const dispatch = useDispatch()\n    const removeTask = () => {\n        dispatch(deleteTaskTC(props.todoListId, props.id))\n    }\n\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\n\n        dispatch(updateTaskTC(props.todoListId, props.id, {status}))\n    }, [dispatch, props.id, props.todoListId])\n\n    const changeTaskTitle = useCallback((title: string) => {\n        dispatch(updateTaskTC(props.todoListId, props.id, {title}))\n    }, [dispatch, props.id, props.todoListId])\n\n    return (\n        <div className={props.status === TaskStatuses.Completed ? \"isDone\" : \"\"}>\n            <Checkbox checked={props.status === TaskStatuses.Completed}\n                      onChange={changeStatus}\n                      color={\"secondary\"}\n                      disabled={props.entityStatus === 'loading'}\n            ></Checkbox>\n            <EditableSpan title={props.title}\n                          changeTitle={changeTaskTitle}\n                          disabled={props.entityStatus === 'loading'}\n            />\n            <IconButton onClick={removeTask} disabled={props.entityStatus === 'loading'}>\n                <Delete />\n            </IconButton>\n        </div>\n    )\n})\n\nexport default Task\n","import React, {useCallback, useEffect} from \"react\";\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\nimport EditableSpan from \"../../../components/EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../app/store\";\nimport {addTaskTC, getTasksTC, TaskDomainType, TaskType} from \"./Task/tasks-reducer\";\nimport {\n    changeFilterAC,\n    changeTodolistTitleTC, deleteTodoListTC,\n    FilterValuesType,\n    TodolistDomainType\n} from \"./tl-reducer\";\nimport Task from \"./Task/Task\";\nimport {TaskStatuses} from \"../../../api/todolist-api\";\nimport {RequestStatusType} from \"../../../app/app-reducer\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n    removeTask: (taskId: string, todoListID: string) => void\n    changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\n}\n\nconst Todolist = React.memo((props: TodoListPropsType) => {\n\n    let todoList = useSelector<AppRootStateType, TodolistDomainType>(state => state.todoLists.filter(tl => tl.id === props.id)[0])\n    let tasks = useSelector<AppRootStateType, TaskDomainType[]>(state => state.tasks[props.id])\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getTasksTC(props.id))\n    }, [])\n\n    let allToDoListTasks = tasks;\n    let todoListTasks = allToDoListTasks;\n    if (props.filter === \"active\") {\n        todoListTasks = allToDoListTasks.filter(t => t.status !== TaskStatuses.Completed)\n    } else if (props.filter === \"completed\") {\n        todoListTasks = allToDoListTasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    const createTask = useCallback((title: string) => {\n        dispatch(addTaskTC(todoList.id, title))\n    }, [dispatch])\n\n    const changeTodoListTitle = useCallback((title: string) => {\n        dispatch(changeTodolistTitleTC(todoList.id, title))\n    }, [dispatch])\n\n    const removeTodoList = useCallback(() => {\n        dispatch(deleteTodoListTC(todoList.id))\n    }, [dispatch])\n\n    return (\n        <div>\n            <h3><EditableSpan title={todoList.title} changeTitle={changeTodoListTitle}/>\n                <IconButton onClick={removeTodoList} disabled={props.entityStatus === 'loading'}>\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemForm createItem={createTask} disabled={props.entityStatus === 'loading'}/>\n            <div>\n                {todoListTasks.map(t => {\n                    return <Task key={t.id}\n                                 id={t.id}\n                                 todoListId={props.id}\n                                 title={t.title}\n                                 status={t.status}\n                                 entityStatus={t.entityStatus}\n                    />\n                })}\n            </div>\n            <div>\n                <Button color={todoList.filter === 'all' ? \"primary\" : \"default\"}\n                        variant={\"contained\"}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC(todoList.id, \"all\"))\n                        }}>All\n                </Button>\n                <Button color={todoList.filter === \"active\" ? \"primary\" : \"default\"}\n                        variant={\"contained\"}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC(todoList.id, \"active\"))\n                        }}>Active\n                </Button>\n                <Button color={todoList.filter === 'completed' ? \"primary\" : \"default\"}\n                        variant={\"contained\"}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC(todoList.id, \"completed\"))\n                        }}>Completed\n                </Button>\n            </div>\n        </div>\n    )\n})\n\nexport default Todolist\n","import React, {useCallback, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {\n    changeFilterAC,\n    createTodoListTC,\n    FilterValuesType,\n    getTodoListsTC,\n    TodolistDomainType\n} from \"./TodoList/tl-reducer\";\nimport {deleteTaskTC, TaskStateType} from \"./TodoList/Task/tasks-reducer\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\nimport Todolist from \"./TodoList/Todolist\";\nimport { Redirect } from \"react-router-dom\";\n\n\nconst TodolistsList: React.FC = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\n    const todoLists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todoLists)\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        if (!isLoggedIn) {\n            return\n        }\n        dispatch(getTodoListsTC())\n    }, [])\n\n    const removeTask = useCallback((taskId: string, todoListID: string) => {\n        dispatch(deleteTaskTC(todoListID, taskId))\n    }, [dispatch])\n\n    const changeFilter = useCallback((newFilterValue: FilterValuesType, todoListID: string) => {\n        dispatch(changeFilterAC(todoListID, newFilterValue))\n    }, [dispatch])\n\n\n    const createTodoList = useCallback((title: string) => {\n        dispatch(createTodoListTC(title))\n    }, [dispatch])\n\n    if (!isLoggedIn) {\n        return <Redirect to={'/login'} />\n    }\n\n    return (\n        <>\n            <Grid container style={{padding : \"30px 0\"}}>\n                <AddItemForm createItem={createTodoList}/>\n            </Grid>\n            <Grid container spacing={4}>\n                {\n                    todoLists.map(tl => {\n\n                        return <Grid item key={tl.id}>\n                            <Paper elevation={3} style={{padding : \"25px\"}}>\n                                <Todolist id={tl.id}\n                                          title={tl.title}\n                                          removeTask={removeTask}\n                                          changeFilter={changeFilter}\n                                          filter={tl.filter}\n                                          entityStatus={tl.entityStatus}\n                                />\n                            </Paper>\n                        </Grid>\n                    })}\n            </Grid>\n        </>\n    )\n}\n\nexport default TodolistsList;\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n    const dispatch = useDispatch()\n    let error = useSelector<AppRootStateType, string | null>((state) => state.app.error)\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC(null))\n    }\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport { Redirect } from 'react-router-dom';\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required'\n            } else if (values.password.length < 3) {\n                errors.password = 'The password is too short'\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            formik.resetForm()\n            dispatch(loginTC(values))\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'} />\n    }\n\n    return <Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}>here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"email\")}\n                        />\n                        {formik.touched.email && formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"password\")}\n                        />\n                        {formik.touched.password && formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox\n                                {...formik.getFieldProps(\"rememberMe\")}\n                            />}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport TodolistsList from \"../features/TodolistLists/TodolistLists\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                    {isLoggedIn ? <Button onClick={logout}>LOG OUT</Button> : null}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList />} />\r\n                    <Route path={'/login'} render={() => <Login />} />\r\n                    <Route path={'/404'} render={() => <h1>404: Page not found</h1>} />\r\n                    <Redirect from={'*'} to={'/404'}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {TaskActionsType, tasksReducer} from '../features/TodolistLists/TodoList/Task/tasks-reducer';\nimport {TodolistActionsType, todoListReducer} from '../features/TodolistLists/TodoList/tl-reducer';\nimport {applyMiddleware, combineReducers, createStore} from 'redux';\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\nimport {appReducer} from \"./app-reducer\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todoLists: todoListReducer,\n    app: appReducer,\n    auth: authReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\ntype AppActionType = TodolistActionsType | TaskActionsType\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType, AppRootStateType, unknown, AppActionType>\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>,  document.getElementById('root')\r\n\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}