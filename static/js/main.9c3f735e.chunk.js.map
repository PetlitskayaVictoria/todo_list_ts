{"version":3,"sources":["serviceWorker.ts","AddItemForm.tsx","Todolist/EditableSpan.tsx","reducers/tasks-reducer.ts","reducers/tl-reducer.ts","Todolist/Task/Task.tsx","Todolist/Todolist.tsx","AppWithRedux.tsx","state/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","AddItemForm","React","memo","props","useState","error","setError","title","setTitle","createItem","trim","TextField","variant","value","onChange","event","currentTarget","onKeyPress","key","onBlur","helperText","label","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","editModeOff","changeTitle","autoFocus","onDoubleClick","initialState","removeTaskAC","taskId","todolistId","type","todoListId","addTaskAC","changeTaskStatusAC","isDone","changeTaskTitleAC","v1","removeTodolistAC","id","changeTodolistTitleAC","changeFilterAC","newValue","Task","console","log","dispatch","useDispatch","changeStatus","useCallback","e","checked","changeTaskTitle","className","Checkbox","color","Delete","Todolist","todoList","useSelector","state","todoLists","filter","tl","tasks","allToDoListTasks","todoListTasks","t","createTask","changeTodoListTitle","removeTodoList","map","Button","size","AppWithRedux","removeTask","todoListID","addTask","changeFilter","newFilterValue","action","createTodoList","addTodolistAC","lists","Grid","item","Paper","elevation","style","padding","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","Container","fixed","container","spacing","rootReducer","combineReducers","stateCopy","newTask","updatedTasks","newTasks","newTodoListId","newTodoList","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.9c3f735e.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\nexport type AddItemFormType = {\n    createItem: (title: string) => void\n}\n\n\nconst AddItemForm = React.memo((props: AddItemFormType) =>  {\n    const [error, setError] = useState<string | null>(null)\n    const [title, setTitle] = useState<string>(\"\")\n\n    const createItem = () => {\n        if (title.trim()) {\n            props.createItem(title)\n            setTitle(\"\")\n        } else {\n            setTitle(\"\")\n            setError(\"Name is required\")\n        }\n    }\n\n    const changeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n        // setError(null)\n    }\n    const onKeyPressAddTask = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) setError(null)\n        if (event.key === \"Enter\") createItem()\n    }\n\n    return (\n        <div>\n            <TextField variant={\"outlined\"}\n                       value={title}\n                       onChange={changeInputValue}\n                       onKeyPress={onKeyPressAddTask}\n                       onBlur={() => {setError(null)}}\n                       helperText={error ? \"Name is required\" : \"\"}\n                       label={\"Title\"}\n                       error={!!error}\n            />\n\n            <IconButton onClick={createItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})\n\nexport default AddItemForm;\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanType = {\n    title: string\n    changeTitle: (title: string) => void\n}\n\nconst EditableSpan = React.memo((props: EditableSpanType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n    const editModeOn = () => {\n        setEditMode(true)\n    }\n    const editModeOff = () => {\n        props.changeTitle(title)\n        setEditMode(false)\n    }\n\n    const saveOnClick = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === \"Enter\") {\n            editModeOff()\n        }\n    }\n\n    const changeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n    }\n\n\n    return (\n        editMode ? <TextField\n                value={title}\n                onChange={changeInputValue}\n                onBlur={editModeOff}\n                autoFocus={true}\n                onKeyPress={saveOnClick}/>\n            :\n            <span onDoubleClick={editModeOn}>{props.title}</span>\n    )\n})\n\nexport default EditableSpan\n","import {TaskStateType} from \"../App\";\nimport {v1} from \"uuid\";\nimport {addTodoListActionType, removeTodoListActionType, toDoListID1, toDoListID2} from \"./tl-reducer\";\n\ntype RemoveTaskActionType = {\n    type: 'REMOVE_TASK'\n    taskId: string\n    todoListId: string\n}\n\ntype AddTaskActionType = {\n    type: 'ADD_TASK'\n    title: string\n    todoListId: string\n}\n\ntype ChangeTaskStatusActionType = {\n    type: 'CHANGE_TASK_STATUS'\n    taskId: string\n    isDone: boolean\n    todoListId: string\n}\n\ntype ChangeTaskTitleActionType = {\n    type: 'CHANGE_TASK_TITLE'\n    taskId: string\n    title: string\n    todoListId: string\n}\n\nexport type ActionsType =\n    RemoveTaskActionType\n    | AddTaskActionType\n    | ChangeTaskStatusActionType\n    | ChangeTaskTitleActionType\n    | addTodoListActionType\n    | removeTodoListActionType\n\nlet initialState: TaskStateType = {\n    // [toDoListID1] : [\n    //     {id : v1(), title : \"JS\", isDone : true},\n    //     {id : v1(), title : \"CSS\", isDone : false},\n    //     {id : v1(), title : \"React\", isDone : false},\n    //     {id : v1(), title : \"Angular\", isDone : false},\n    //     {id : v1(), title : \"Java\", isDone : true},\n    // ],\n    // [toDoListID2] : [\n    //     {id : v1(), title : \"Books\", isDone : true},\n    //     {id : v1(), title : \"Cake\", isDone : false},\n    // ]\n}\n\nexport const tasksReducer = (state = initialState, action: ActionsType): TaskStateType => {\n    let stateCopy = {...state}\n    switch (action.type) {\n        case 'REMOVE_TASK': {\n            const todoListTasks = stateCopy[action.todoListId]\n            stateCopy[action.todoListId] = todoListTasks.filter(t => t.id !== action.taskId)\n            return stateCopy\n\n        }\n        case 'ADD_TASK': {\n            const newTask = {\n                id : v1(),\n                title : action.title,\n                isDone : false\n            }\n            const updatedTasks = stateCopy[action.todoListId]\n            stateCopy[action.todoListId] = [newTask, ...updatedTasks]\n            return stateCopy\n        }\n        case \"CHANGE_TASK_STATUS\": {\n            const newTasks = stateCopy[action.todoListId].map(t => {\n                    if (t.id === action.taskId) {\n                        return {...t, isDone : action.isDone}\n                    } else {\n                        return t\n                    }\n                }\n            )\n            stateCopy[action.todoListId] = newTasks\n            return stateCopy\n        }\n        case \"CHANGE_TASK_TITLE\": {\n            const newTasks = stateCopy[action.todoListId].map(t => {\n                    if (t.id === action.taskId) {\n                        return {...t, title : action.title}\n                    } else {\n                        return t\n                    }\n                }\n            )\n            stateCopy[action.todoListId] = newTasks\n            return stateCopy\n        }\n\n        case \"ADD-TODOLIST\": {\n            return {\n                ...state,\n                [action.todoListId] : []\n            }\n        }\n\n        case \"REMOVE-TODOLIST\": {\n            delete stateCopy[action.id]\n            return stateCopy\n\n        }\n\n        default:\n            return state\n    }\n}\n\nexport const removeTaskAC = (taskId: string, todolistId: string): RemoveTaskActionType => {\n    return {\n        type : 'REMOVE_TASK',\n        taskId : taskId,\n        todoListId : todolistId\n    }\n}\nexport const addTaskAC = (title: string, todolistId: string): AddTaskActionType => {\n    return {\n        type : 'ADD_TASK',\n        title : title,\n        todoListId : todolistId\n    }\n}\n\nexport const changeTaskStatusAC = (taskId: string, isDone: boolean, todolistId: string): ChangeTaskStatusActionType => {\n    return {\n        type : 'CHANGE_TASK_STATUS',\n        taskId : taskId,\n        isDone : isDone,\n        todoListId : todolistId\n\n    }\n}\n\nexport const changeTaskTitleAC = (title: string, taskId: string, todolistId: string): ChangeTaskTitleActionType => {\n    return {\n        type : \"CHANGE_TASK_TITLE\",\n        taskId : taskId,\n        title : title,\n        todoListId : todolistId\n    }\n}\n\n\n\n\n\n","import {FilterValuesType, TodoListType} from \"../App\";\nimport {v1} from \"uuid\";\n\nconst REMOVE_TODOLIST = 'REMOVE-TODOLIST'\nconst ADD_TODOLIST = 'ADD-TODOLIST'\nconst CHANGE_TODOLIST_TITLE = 'CHANGE-TODOLIST-TITLE'\nconst CHANGE_FILTER = 'CHANGE-FILTER'\n\nexport type removeTodoListActionType = {\n    type: 'REMOVE-TODOLIST',\n    id: string\n}\n\nexport type addTodoListActionType = {\n    type: 'ADD-TODOLIST',\n    title: string\n    todoListId: string\n}\n\ntype changeTodoListTitleActionType = {\n    type: 'CHANGE-TODOLIST-TITLE',\n    id: string,\n    title: string\n}\n\ntype changeFilterActionType = {\n    type: 'CHANGE-FILTER',\n    id: string,\n    newValue: FilterValuesType\n}\n\nexport type ActionsType =\n    removeTodoListActionType\n    | addTodoListActionType\n    | changeTodoListTitleActionType\n    | changeFilterActionType\n\nexport const toDoListID1 = v1()\nexport const toDoListID2 = v1()\n\nlet initialState: Array<TodoListType> = [\n    // {id : toDoListID1, title : \"What to learn\", filter : \"active\"},\n    // {id : toDoListID2, title : \"What to buy\", filter : \"all\"}\n]\n\nexport const todoListReducer = (state = initialState, action: ActionsType): Array<TodoListType> => {\n    switch (action.type) {\n        case ADD_TODOLIST: {\n            const newTodoListId = action.todoListId\n            const newTodoList: TodoListType = {\n                id : newTodoListId,\n                title : action.title,\n                filter : \"all\"\n            }\n\n            return [newTodoList, ...state]\n\n        }\n        case REMOVE_TODOLIST: {\n            return state.filter(tl => tl.id !== action.id)\n\n        }\n        case CHANGE_FILTER: {\n            return state.map(tl => {\n                return tl.id === action.id ? {...tl, filter : action.newValue} : tl\n            })\n        }\n        case CHANGE_TODOLIST_TITLE: {\n            debugger\n            return state.map(tl => {\n                return tl.id === action.id ? {...tl, title : action.title} : tl\n            })\n        }\n        default:\n            return state\n    }\n}\n\nexport const removeTodolistAC = (todolistId: string) => {\n    return {\n        type: REMOVE_TODOLIST,\n        id: todolistId\n    } as const\n}\n\nexport const addTodolistAC = (title: string): addTodoListActionType => {\n    return {\n        type: ADD_TODOLIST,\n        title: title,\n        todoListId: v1()\n    } as const\n}\n\nexport const changeTodolistTitleAC = (title: string, id: string) => {\n    return {\n        type: CHANGE_TODOLIST_TITLE,\n        id: id,\n        title: title\n    } as const\n}\n\nexport const changeFilterAC = (id: string, newValue: FilterValuesType) => {\n    return {\n        type: CHANGE_FILTER,\n        id: id,\n        newValue: newValue\n    } as const\n}\n","import React, {ChangeEvent, useCallback} from \"react\";\nimport {changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"../../reducers/tasks-reducer\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport EditableSpan from \"../EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\n\nexport type TaskPropsType = {\n    id: string\n    todoListId: string\n    title: string\n    isDone: boolean\n}\n\nconst Task = React.memo((props: TaskPropsType) => {\n    console.log(\"Task is called\")\n    const dispatch = useDispatch()\n    const removeTask = () => {\n        dispatch(removeTaskAC(props.id, props.todoListId))\n    }\n\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        dispatch(changeTaskStatusAC(props.id, e.currentTarget.checked, props.todoListId))\n    }, [dispatch, props.id, props.todoListId])\n\n    const changeTaskTitle = useCallback((title: string) => {\n        dispatch(changeTaskTitleAC(title, props.id, props.todoListId))\n    }, [dispatch, props.id, props.todoListId])\n\n    return (\n        <div className={props.isDone ? \"isDone\" : \"\"}>\n            <Checkbox checked={props.isDone}\n                      onChange={changeStatus}\n                      color={\"secondary\"}\n            ></Checkbox>\n            <EditableSpan title={props.title} changeTitle={changeTaskTitle}/>\n            <IconButton onClick={removeTask}>\n                <Delete />\n            </IconButton>\n        </div>\n    )\n})\n\nexport default Task\n","import React, {ChangeEvent, useCallback} from \"react\";\nimport {FilterValuesType, TaskType, TodoListType} from \"../App\";\nimport AddItemForm from \"../AddItemForm\";\nimport EditableSpan from \"./EditableSpan\";\nimport {Button, Checkbox, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../state/store\";\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC} from \"../reducers/tasks-reducer\";\nimport {changeFilterAC, changeTodolistTitleAC, removeTodolistAC} from \"../reducers/tl-reducer\";\nimport Task from \"./Task/Task\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n    tasks: Array<TaskType>\n    removeTask: (taskId: string, todoListID: string) => void\n    addTask: (title: string, todoListID: string) => void\n    changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\n    changeStatus: (taskId: string, isDone: boolean, todoListID: string) => void\n    removeTodoList: (todoListID: string) => void\n    changeTaskTitle: (title: string, taskId: string, todoListId: string) => void\n    changeTodoListTitle: (title: string, todoListId: string) => void\n}\n\nconst Todolist = React.memo((props: TodoListPropsType) => {\n    console.log(\"Todo list\")\n\n    let todoList = useSelector<AppRootStateType, TodoListType>(state => state.todoLists.filter(tl => tl.id === props.id)[0])\n    let tasks = useSelector<AppRootStateType, TaskType[]>(state => state.tasks[props.id])\n    const dispatch = useDispatch()\n\n    let allToDoListTasks = props.tasks;\n    let todoListTasks = allToDoListTasks;\n    if (props.filter === \"active\") {\n        todoListTasks = allToDoListTasks.filter(t => !t.isDone)\n    } else if (props.filter === \"completed\") {\n        todoListTasks = allToDoListTasks.filter(t => t.isDone)\n    }\n\n    const createTask = useCallback((title: string) => {\n        dispatch(addTaskAC(title, todoList.id))\n    }, [dispatch])\n\n    const changeTodoListTitle = useCallback((title: string) => {\n        dispatch(changeTodolistTitleAC(title, todoList.id))\n    }, [dispatch])\n\n    const removeTodoList = useCallback(() => {\n        dispatch(removeTodolistAC(todoList.id))\n    }, [dispatch])\n\n    return (\n        <div>\n            <h3><EditableSpan title={todoList.title} changeTitle={changeTodoListTitle}/>\n                <IconButton onClick={removeTodoList}>\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemForm createItem={createTask}/>\n            <div>\n                {todoListTasks.map(t => {\n                    return <Task key={t.id}\n                                 id={t.id}\n                                 todoListId={props.id}\n                                 title={t.title}\n                                 isDone={t.isDone}\n                    />\n                })}\n            </div>\n            <div>\n                <Button color={todoList.filter === 'all' ? \"primary\" : \"default\"}\n                        variant={\"contained\"}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC(todoList.id, \"all\"))\n                        }}>All\n                </Button>\n                <Button color={todoList.filter === \"active\" ? \"primary\" : \"default\"}\n                        variant={\"contained\"}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC(todoList.id, \"active\"))\n                        }}>Active\n                </Button>\n                <Button color={todoList.filter === 'completed' ? \"primary\" : \"default\"}\n                        variant={\"contained\"}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC(todoList.id, \"completed\"))\n                        }}>Completed\n                </Button>\n            </div>\n        </div>\n    )\n})\n\nexport default Todolist\n","import React, {useCallback, useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport Todolist from \"./Todolist/Todolist\";\r\nimport {v1} from \"uuid\";\r\nimport AddItemForm from \"./AddItemForm\";\r\nimport {AppBar, Button, Container, Grid, IconButton, Paper, Toolbar, Typography} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport {\r\n    addTodolistAC,\r\n    changeFilterAC,\r\n    changeTodolistTitleAC,\r\n    removeTodolistAC,\r\n    todoListReducer\r\n} from \"./reducers/tl-reducer\";\r\nimport {addTaskAC, changeTaskStatusAC, changeTaskTitleAC, removeTaskAC, tasksReducer} from \"./reducers/tasks-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./state/store\";\r\n\r\n\r\nexport type TaskType = {\r\n    id: string,\r\n    title: string,\r\n    isDone: boolean\r\n}\r\n\r\nexport type TodoListType = {\r\n    id: string\r\n    title: string\r\n    filter: FilterValuesType\r\n}\r\n\r\nexport type TaskStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n\r\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\r\n\r\nfunction AppWithRedux() {\r\n\r\n    const todoLists = useSelector<AppRootStateType, TodoListType[]>(state => state.todoLists)\r\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n   const removeTask = useCallback((taskId: string, todoListID: string) => {\r\n        dispatch(removeTaskAC(taskId, todoListID))\r\n    }, [dispatch])\r\n\r\n    const addTask = useCallback((title: string, todoListID: string) => {\r\n        dispatch(addTaskAC(title, todoListID))\r\n    }, [dispatch])\r\n\r\n    const changeFilter = useCallback((newFilterValue: FilterValuesType, todoListID: string) => {\r\n        dispatch(changeFilterAC(todoListID, newFilterValue))\r\n    }, [dispatch])\r\n\r\n    const changeStatus = useCallback((taskId: string, isDone: boolean, todoListID: string) => {\r\n        dispatch(changeTaskStatusAC(taskId, isDone, todoListID))\r\n    }, [dispatch])\r\n\r\n    const removeTodoList = useCallback((todoListID: string) => {\r\n        let action = removeTodolistAC(todoListID)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const createTodoList = useCallback((title: string) => {\r\n        let action = addTodolistAC(title)\r\n        dispatch(action)\r\n    }, [dispatch])\r\n\r\n    const changeTaskTitle = useCallback((title: string, taskId: string, todoListId: string) => {\r\n        dispatch(changeTaskTitleAC(taskId, title, todoListId))\r\n    }, [dispatch])\r\n\r\n    const changeTodoListTitle = useCallback((title: string, todoListId: string) => {\r\n        dispatch(changeTodolistTitleAC(todoListId, title))\r\n    }, [dispatch])\r\n\r\n    const lists = todoLists.map(tl => {\r\n        let allToDoListTasks = tasks[tl.id];\r\n\r\n        return <Grid item key={tl.id}>\r\n            <Paper elevation={3} style={{padding : \"25px\"}}>\r\n                <Todolist id={tl.id}\r\n                          title={tl.title}\r\n                          tasks={allToDoListTasks}\r\n                          removeTask={removeTask}\r\n                          addTask={addTask}\r\n                          changeFilter={changeFilter}\r\n                          changeStatus={changeStatus}\r\n                          filter={tl.filter}\r\n                          removeTodoList={removeTodoList}\r\n                          changeTaskTitle={changeTaskTitle}\r\n                          changeTodoListTitle={changeTodoListTitle}\r\n                />\r\n            </Paper>\r\n        </Grid>\r\n    })\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                </Toolbar>\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Grid container style={{padding : \"30px 0\"}}>\r\n                    <AddItemForm createItem={createTodoList}/>\r\n                </Grid>\r\n                <Grid container spacing={4}>\r\n                    {lists}\r\n                </Grid>\r\n\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppWithRedux;\r\n","import {tasksReducer} from './../reducers/tasks-reducer';\nimport {todoListReducer} from './../reducers/tl-reducer';\nimport {combineReducers, createStore} from 'redux';\n\n// объединяя reducer-ы с помощью combineReducers,\n// мы задаём структуру нашего единственного объекта-состояния\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todoLists: todoListReducer\n})\n// непосредственно создаём store\nexport const store = createStore(rootReducer);\n// определить автоматически тип всего объекта состояния\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport AppWithReducer from \"./AppWithReducer\";\r\nimport AppWithRedux from \"./AppWithRedux\";\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./state/store\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n    <AppWithRedux />\r\n    </Provider>,  document.getElementById('root')\r\n\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}