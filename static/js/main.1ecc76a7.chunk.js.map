{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistLists/TodoList/tl-reducer.ts","features/TodolistLists/TodoList/Task/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistLists/TodoList/Task/Task.tsx","features/TodolistLists/TodoList/Todolist.tsx","features/TodolistLists/TodolistLists.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","app/store.ts","features/Login/Login.tsx","app/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todolistId","title","put","get","post","delete","tasksAPI","taskId","model","authAPI","params","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","isInitialized","appReducer","getTodoListsTC","todoLists","createTodoListTC","todoList","item","deleteTodoListTC","todoListId","changeTodolistEntityStatusAC","id","entityStatus","changeTodolistTitleTC","changeFilterAC","index","findIndex","tl","filter","newValue","map","unshift","splice","todoListReducer","getTasksTC","tasks","items","deleteTaskTC","changeTaskEntityStatusAC","addTaskTC","task","updateTaskTC","getState","find","t","apiModel","description","priority","startDate","deadline","domainModel","forEach","tasksReducer","AddItemForm","React","memo","props","useState","setError","setTitle","createItem","trim","TextField","variant","onChange","event","currentTarget","onKeyPress","key","onBlur","helperText","label","disabled","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","editModeOff","changeTitle","autoFocus","onDoubleClick","Task","useDispatch","changeStatus","useCallback","e","checked","Completed","New","changeTaskTitle","className","Checkbox","color","Delete","Todolist","useSelector","useEffect","allToDoListTasks","todoListTasks","createTask","changeTodoListTitle","removeTodoList","style","marginTop","Button","size","TodolistsList","auth","removeTask","todoListID","changeFilter","newFilterValue","createTodoList","Grid","container","padding","spacing","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","setFieldError","field","resetForm","Box","height","display","alignItems","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","useStyles","makeStyles","theme","root","flexGrow","menuButton","marginRight","App","classes","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","maxWidth","path","render","exact","top","textAlign","width","CircularProgress","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.1ecc76a7.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '9fa0e134-93f8-4f6c-b99f-9c479847d776'\n    }\n})\n\n// api\n\nexport const todolistAPI = {\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title})\n    },\n    getTodoLists() {\n        return instance.get<Array<TodolistType>>(`todo-lists`)\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\n    }\n}\nexport const tasksAPI = {\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksType>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    }\n}\n\nexport const authAPI = {\n    login(params: LoginParamsType){\n        return instance.post<ResponseType<{userId: number}>>('auth/login', params)\n    },\n    me(){\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\n    },\n    logout(){\n        return instance.delete<ResponseType<{}>>('auth/login')\n    }\n}\n\n// types\n\nexport type TodolistType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\nexport type FieldErrorType = {field: string, error: string}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    fieldsErrors?: Array<FieldErrorType>\n    data: D\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress= 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    High = 2,\n    Urgently = 3,\n    Later = 4\n}\ntype TaskType= {\n    id: string\n    title: string\n    description: string\n    todoListId: string\n    order: number\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    addedDate: string\n}\ntype GetTasksType = {\n    items: Array<TaskType>\n    totalCount: number\n    error: string | null\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\n\n","import {setAppErrorAC, SetAppErrorACType, setAppStatusAC, SetAppStatusACType,} from '../app/app-reducer';\nimport { Dispatch } from 'redux';\n\nimport { ResponseType } from \"./../api/todolist-api\"\n\n\n// generic function\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: ErrorUtilsDispatchType) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC({error: data.messages[0]}))\n    } else {\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\n    }\n    dispatch(setAppStatusAC({status: 'failed'}))\n}\n\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\n    dispatch(setAppErrorAC({error: error.message}))\n    dispatch(setAppStatusAC({status: 'failed'}))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorACType | SetAppStatusACType>\n","import {setAppStatusAC} from '../../app/app-reducer'\nimport {authAPI, FieldErrorType, LoginParamsType} from \"../../api/todolist-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\nimport {AxiosError} from \"axios\";\n\nexport const loginTC = createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>(\"auth/login\", async (param, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status : 'loading'}))\n    try {\n        let res = await authAPI.login(param)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatusAC({status : 'succeeded'}))\n            return\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch)\n            return thunkAPI.rejectWithValue({errors : res.data.messages, fieldsErrors : res.data.fieldsErrors})\n        }\n    } catch (err) {\n        let error: AxiosError = err\n        handleServerNetworkError(error, thunkAPI.dispatch)\n        return thunkAPI.rejectWithValue({errors : [error.message], fieldsErrors : undefined})\n    }\n})\nexport const logoutTC = createAsyncThunk(\"auth/logout\", async (param, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status : 'loading'}))\n    try {\n        const res = await authAPI.logout()\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatusAC({status : 'succeeded'}))\n            return\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch)\n            return thunkAPI.rejectWithValue({})\n        }\n    } catch (error) {\n        handleServerNetworkError(error, thunkAPI.dispatch)\n        return thunkAPI.rejectWithValue({})\n    }\n})\n\nconst slice = createSlice({\n    name : \"auth\",\n    initialState : {\n        isLoggedIn : false\n    },\n    reducers : {\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\n            {\n                state.isLoggedIn = action.payload.value\n            }\n        }\n    },\n    extraReducers : (builder) => {\n        builder.addCase(loginTC.fulfilled, (state, action) => {\n            state.isLoggedIn = true\n        });\n        builder.addCase(logoutTC.fulfilled, (state, action) => {\n            state.isLoggedIn = false\n        });\n    }\n})\n\nexport const authReducer = slice.reducer\n\nexport const {setIsLoggedInAC} = slice.actions\n\n\n\n\n","import {authAPI} from \"../api/todolist-api\";\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nexport type InitialStateType = {\n    status: RequestStatusType\n    error: string | null\n    isInitialized: boolean\n}\nexport const initializeAppTC = createAsyncThunk(\"app/initializeApp\", async (param, {dispatch}) => {\n        let res = await authAPI.me()\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC({value: true}));\n        } else {}\n})\n\nconst slice = createSlice({\n    name: \"app\",\n    initialState: {\n        status : 'idle',\n        error : null,\n        isInitialized : false\n    } as InitialStateType,\n    reducers: {\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>) {\n            state.status = action.payload.status\n        },\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>) {\n            state.error = action.payload.error\n        }\n    },\n    extraReducers : (builder) => {\n        builder.addCase(initializeAppTC.fulfilled, (state, action) => {\n            state.isInitialized = true\n        });\n    }\n})\nexport const appReducer = slice.reducer\nexport const {setAppStatusAC, setAppErrorAC} = slice.actions\n\nexport type SetAppStatusACType = ReturnType<typeof setAppStatusAC>\nexport type SetAppErrorACType = ReturnType<typeof setAppErrorAC>\n\n","import {tasksAPI, todolistAPI, TodolistType} from \"../../../api/todolist-api\";\nimport {Dispatch} from \"redux\";\nimport {\n    RequestStatusType,\n    setAppStatusAC,\n} from \"../../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport const getTodoListsTC = createAsyncThunk('todolists/getTodoLists', async (param, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status : 'loading'}))\n    try {\n        let res = await todolistAPI.getTodoLists()\n        thunkAPI.dispatch(setAppStatusAC({status : 'succeeded'}))\n        return {todoLists : res.data}\n    } catch (error) {\n        handleServerNetworkError(error, thunkAPI.dispatch)\n        return thunkAPI.rejectWithValue({})\n    }\n})\nexport const createTodoListTC = createAsyncThunk('todolists/createTodoList', async (title: string, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status : 'loading'}))\n    try {\n        let res = await todolistAPI.createTodolist(title)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatusAC({status : 'succeeded'}))\n            return {todoList : res.data.data.item}\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch)\n            return thunkAPI.rejectWithValue({})\n        }\n    } catch (error) {\n        handleServerNetworkError(error, thunkAPI.dispatch)\n        return thunkAPI.rejectWithValue({})\n    }\n})\nexport const deleteTodoListTC = createAsyncThunk('todolists/deleteTodoList', async (todoListId: string, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status : 'loading'}))\n    thunkAPI.dispatch(changeTodolistEntityStatusAC({id : todoListId, entityStatus : 'loading'}))\n    try {\n        let res = await todolistAPI.deleteTodolist(todoListId)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatusAC({status : 'succeeded'}))\n            return {todolistId : todoListId}\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch)\n            return thunkAPI.rejectWithValue({})\n        }\n    } catch (error) {\n        handleServerNetworkError(error, thunkAPI.dispatch)\n        return thunkAPI.rejectWithValue({})\n    }\n})\nexport const changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: {todoListId: string, title: string}, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status : 'loading'}))\n    try {\n        let res = await todolistAPI.updateTodolist(param.todoListId, param.title)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatusAC({status : 'succeeded'}))\n            return {title: param.title, id : param.todoListId}\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch)\n            return thunkAPI.rejectWithValue({})\n        }\n    } catch (error) {\n        handleServerNetworkError(error, thunkAPI.dispatch)\n        return thunkAPI.rejectWithValue({})\n    }\n})\n\nconst slice = createSlice({\n    name : \"todolists\",\n    initialState : [] as Array<TodolistDomainType>,\n    reducers : {\n        // changeTodolistTitleAC(state, action: PayloadAction<{ title: string, id: string }>) {\n        //     const index = state.findIndex(tl => tl.id === action.payload.id)\n        //     state[index].title = action.payload.title\n        // },\n        changeFilterAC(state, action: PayloadAction<{ id: string, newValue: FilterValuesType }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].filter = action.payload.newValue\n        },\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].entityStatus = action.payload.entityStatus\n        },\n    },\n    extraReducers : (builder) => {\n        builder.addCase(getTodoListsTC.fulfilled, (state, action) => {\n            return action.payload.todoLists.map((tl) => ({...tl, filter : \"all\", entityStatus : 'idle'}))\n        });\n        builder.addCase(createTodoListTC.fulfilled, (state, action) => {\n            state.unshift({...action.payload.todoList, filter : \"all\", entityStatus : \"idle\"})\n        });\n        builder.addCase(deleteTodoListTC.fulfilled, (state, action) => {\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\n            if (index > - 1) {\n                state.splice(index, 1)\n            }\n        });\n        builder.addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].title = action.payload.title\n        });\n    }\n})\nexport const todoListReducer = slice.reducer\nexport const {changeFilterAC, changeTodolistEntityStatusAC} = slice.actions\n\n// types\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\nexport type TodolistDomainType = TodolistType & { filter: FilterValuesType, entityStatus: RequestStatusType }\n\n\n","import {\n    createTodoListTC, deleteTodoListTC, getTodoListsTC,\n} from \"../tl-reducer\";\nimport {TaskPriorities, tasksAPI, TaskStatuses, UpdateTaskModelType} from \"../../../../api/todolist-api\";\nimport {AppRootStateType} from \"../../../../app/store\";\nimport {\n    RequestStatusType,\n    setAppStatusAC\n} from \"../../../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../../utils/error-utils\";\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type TaskStateType = {\n    [key: string]: Array<TaskDomainType>\n}\n\nexport const getTasksTC = createAsyncThunk('tasks/getTasks', async (todoListId: string, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status : 'loading'}))\n    try {\n        let res = await tasksAPI.getTasks(todoListId)\n        const tasks = res.data.items\n        thunkAPI.dispatch(setAppStatusAC({status : 'succeeded'}))\n        return {todoListId, tasks}\n    } catch (error) {\n        handleServerNetworkError(error, thunkAPI.dispatch)\n        return thunkAPI.rejectWithValue({})\n    }\n})\nexport const deleteTaskTC = createAsyncThunk('tasks/deleteTask', async (param: { todolistId: string, taskId: string }, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status : 'loading'}))\n    thunkAPI.dispatch(changeTaskEntityStatusAC({\n        taskId : param.taskId,\n        todoListId : param.todolistId,\n        entityStatus : \"loading\"\n    }))\n    try {\n        let res = await tasksAPI.deleteTask(param.todolistId, param.taskId)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatusAC({status : 'succeeded'}))\n            return {taskId : param.taskId, todoListId : param.todolistId}\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch)\n            return thunkAPI.rejectWithValue({})\n        }\n    } catch (error) {\n        handleServerNetworkError(error, thunkAPI.dispatch)\n        return thunkAPI.rejectWithValue({})\n    }\n})\nexport const addTaskTC = createAsyncThunk('tasks/addTask', async (param: { todolistId: string, title: string }, thunkAPI) => {\n    thunkAPI.dispatch(setAppStatusAC({status : 'loading'}))\n    try {\n        let res = await tasksAPI.createTask(param.todolistId, param.title)\n        if (res.data.resultCode === 0) {\n            thunkAPI.dispatch(setAppStatusAC({status : 'succeeded'}))\n            return {task : res.data.data.item}\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch)\n            return thunkAPI.rejectWithValue({})\n        }\n    } catch (error) {\n        handleServerNetworkError(error, thunkAPI.dispatch)\n        return thunkAPI.rejectWithValue({})\n    }\n})\nexport const updateTaskTC = createAsyncThunk('tasks/updateTask', async (param: { todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType }, thunkAPI) => {\n    const state = thunkAPI.getState() as AppRootStateType\n    const task = state.tasks[param.todolistId].find((t) => t.id === param.taskId)\n    if (!task) {\n        return thunkAPI.rejectWithValue(\"Task is not found\")\n    }\n\n    const apiModel: UpdateTaskModelType = {\n        title : task.title,\n        description : task.description,\n        status : task.status,\n        priority : task.priority,\n        startDate : task.startDate,\n        deadline : task.deadline,\n        ...param.domainModel\n    }\n    thunkAPI.dispatch(setAppStatusAC({status : 'loading'}))\n    thunkAPI.dispatch(changeTaskEntityStatusAC({\n        taskId : param.taskId,\n        todoListId : param.todolistId,\n        entityStatus : \"loading\"\n    }))\n    try {\n        let res = await tasksAPI.updateTask(param.todolistId, param.taskId, apiModel)\n        if (res.data.resultCode === 0) {\n            return {taskId : param.taskId, domainModel : param.domainModel, todoListId : param.todolistId}\n        } else {\n            handleServerAppError(res.data, thunkAPI.dispatch)\n            return thunkAPI.rejectWithValue({})\n        }\n    } catch (error) {\n        handleServerNetworkError(error, thunkAPI.dispatch)\n        return thunkAPI.rejectWithValue({})\n    } finally {\n        thunkAPI.dispatch(setAppStatusAC({status : 'succeeded'}))\n        thunkAPI.dispatch(changeTaskEntityStatusAC({\n            taskId : param.taskId,\n            todoListId : param.todolistId,\n            entityStatus : \"succeeded\"\n        }))\n    }\n})\n\nconst slice = createSlice({\n    name : \"tasks\",\n    initialState : {} as TaskStateType,\n    reducers : {\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ taskId: string, todoListId: string, entityStatus: RequestStatusType }>) {\n            const tasks = state[action.payload.todoListId]\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\n            if (index > - 1) {\n                tasks[index].entityStatus = action.payload.entityStatus\n            }\n        }\n    },\n    extraReducers : (builder) => {\n        builder.addCase(createTodoListTC.fulfilled, (state, action) => {\n            state[action.payload.todoList.id] = []\n        });\n        builder.addCase(deleteTodoListTC.fulfilled, (state, action) => {\n            delete state[action.payload.todolistId]\n        });\n        builder.addCase(getTodoListsTC.fulfilled, (state, action) => {\n            action.payload.todoLists.forEach((tl) => state[tl.id] = [])\n        });\n        builder.addCase(getTasksTC.fulfilled, (state, action) => {\n            state[action.payload.todoListId] = action.payload.tasks.map((t) => {\n                return {...t, entityStatus : 'idle'}\n            })\n        });\n        builder.addCase(deleteTaskTC.fulfilled, (state, action) => {\n            const tasks = state[action.payload.todoListId]\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\n            if (index > - 1) {\n                tasks.splice(index, 1)\n            }\n        });\n        builder.addCase(addTaskTC.fulfilled, (state, action) => {\n            state[action.payload.task.todoListId].unshift({...action.payload.task, entityStatus : 'idle'})\n        });\n        builder.addCase(updateTaskTC.fulfilled, (state, action) => {\n            const tasks = state[action.payload.todoListId]\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\n            if (index > - 1) {\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\n            }\n        });\n    }\n})\nexport const tasksReducer = slice.reducer\nexport const {changeTaskEntityStatusAC} = slice.actions\n\n// types\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TaskType = {\n    id: string\n    title: string\n    description: string\n    todoListId: string\n    order: number\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    addedDate: string\n}\nexport type TaskDomainType = TaskType & { entityStatus: RequestStatusType }\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\nexport type AddItemFormType = {\n    createItem: (title: string) => void\n    disabled?: boolean\n}\n\nconst AddItemForm = React.memo((props: AddItemFormType) =>  {\n    const [error, setError] = useState<string | null>(null)\n    const [title, setTitle] = useState<string>(\"\")\n\n    const createItem = () => {\n        if (title.trim()) {\n            props.createItem(title)\n            setTitle(\"\")\n        } else {\n            setTitle(\"\")\n            setError(\"Name is required\")\n        }\n    }\n\n    const changeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n        // setError(null)\n    }\n    const onKeyPressAddTask = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) setError(null)\n        if (event.key === \"Enter\") createItem()\n    }\n\n    return (\n        <div>\n            <TextField variant={\"outlined\"}\n                       value={title}\n                       onChange={changeInputValue}\n                       onKeyPress={onKeyPressAddTask}\n                       onBlur={() => {setError(null)}}\n                       helperText={error ? \"Name is required\" : \"\"}\n                       label={\"Title\"}\n                       error={!!error}\n                       disabled={props.disabled}\n            />\n\n            <IconButton onClick={createItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})\n\nexport default AddItemForm;\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanType = {\n    title: string\n    changeTitle: (title: string) => void\n    disabled?: boolean\n}\n\nconst EditableSpan = React.memo((props: EditableSpanType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n    const editModeOn = () => {\n        setEditMode(true)\n    }\n    const editModeOff = () => {\n        props.changeTitle(title)\n        setEditMode(false)\n    }\n\n    const saveOnClick = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === \"Enter\") {\n            editModeOff()\n        }\n    }\n\n    const changeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n    }\n\n\n    return (\n        editMode && !props.disabled ? <TextField\n                value={title}\n                onChange={changeInputValue}\n                onBlur={editModeOff}\n                autoFocus={true}\n                onKeyPress={saveOnClick}/>\n            :\n            <span onDoubleClick={editModeOn}>{props.title}</span>\n    )\n})\n\nexport default EditableSpan\n","import React, {ChangeEvent, useCallback} from \"react\";\nimport {\n    deleteTaskTC, updateTaskTC\n} from \"./tasks-reducer\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {TaskStatuses} from \"../../../../api/todolist-api\";\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\n\nexport type TaskPropsType = {\n    id: string\n    todoListId: string\n    title: string\n    entityStatus: RequestStatusType\n    status: TaskStatuses\n}\n\nconst Task = React.memo((props: TaskPropsType) => {\n    const dispatch = useDispatch()\n    const removeTask = () => {\n        dispatch(deleteTaskTC({todolistId : props.todoListId, taskId : props.id}))\n    }\n\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\n\n        dispatch(updateTaskTC({todolistId : props.todoListId, taskId : props.id, domainModel : {status}}))\n    }, [dispatch, props.id, props.todoListId])\n\n    const changeTaskTitle = useCallback((title: string) => {\n        dispatch(updateTaskTC({todolistId : props.todoListId, taskId : props.id, domainModel : {title}}))\n    }, [dispatch, props.id, props.todoListId])\n\n    return (\n        <div className={props.status === TaskStatuses.Completed ? \"isDone\" : \"\"}>\n            <Checkbox checked={props.status === TaskStatuses.Completed}\n                      onChange={changeStatus}\n                      color={\"secondary\"}\n                      disabled={props.entityStatus === 'loading'}\n            ></Checkbox>\n            <EditableSpan title={props.title}\n                          changeTitle={changeTaskTitle}\n                          disabled={props.entityStatus === 'loading'}\n            />\n            <IconButton onClick={removeTask} disabled={props.entityStatus === 'loading'}>\n                <Delete/>\n            </IconButton>\n        </div>\n    )\n})\n\nexport default Task\n","import React, {useCallback, useEffect} from \"react\";\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\nimport EditableSpan from \"../../../components/EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../app/store\";\nimport {addTaskTC, getTasksTC, TaskDomainType} from \"./Task/tasks-reducer\";\nimport {\n    changeFilterAC,\n    changeTodolistTitleTC, deleteTodoListTC,\n    FilterValuesType,\n    TodolistDomainType\n} from \"./tl-reducer\";\nimport Task from \"./Task/Task\";\nimport {TaskStatuses} from \"../../../api/todolist-api\";\nimport {RequestStatusType} from \"../../../app/app-reducer\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n    removeTask: (taskId: string, todoListID: string) => void\n    changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\n}\n\nconst Todolist = React.memo((props: TodoListPropsType) => {\n\n    let todoList = useSelector<AppRootStateType, TodolistDomainType>(state => state.todoLists.filter(tl => tl.id === props.id)[0])\n    let tasks = useSelector<AppRootStateType, TaskDomainType[]>(state => state.tasks[props.id])\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getTasksTC(props.id))\n    }, [])\n\n    let allToDoListTasks = tasks;\n    let todoListTasks = allToDoListTasks;\n    if (props.filter === \"active\") {\n        todoListTasks = allToDoListTasks.filter(t => t.status !== TaskStatuses.Completed)\n    } else if (props.filter === \"completed\") {\n        todoListTasks = allToDoListTasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    const createTask = useCallback((title: string) => {\n        dispatch(addTaskTC({todolistId: todoList.id, title}))\n    }, [dispatch])\n\n    const changeTodoListTitle = useCallback((title: string) => {\n        dispatch(changeTodolistTitleTC({todoListId: todoList.id, title}))\n    }, [dispatch])\n\n    const removeTodoList = useCallback(() => {\n        dispatch(deleteTodoListTC(todoList.id))\n    }, [dispatch])\n\n    return (\n        <div>\n            <h3><EditableSpan title={todoList.title} changeTitle={changeTodoListTitle}/>\n                <IconButton onClick={removeTodoList} disabled={props.entityStatus === 'loading'}>\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemForm createItem={createTask} disabled={props.entityStatus === 'loading'}/>\n            <div style={{marginTop: \"20px\"}}>\n                {todoListTasks.map(t => {\n                    return <Task key={t.id}\n                                 id={t.id}\n                                 todoListId={props.id}\n                                 title={t.title}\n                                 status={t.status}\n                                 entityStatus={t.entityStatus}\n                    />\n                })}\n            </div>\n            <div style={{marginTop: \"20px\"}}>\n                <Button color={todoList.filter === 'all' ? \"secondary\" : \"default\"}\n                        variant={todoList.filter === 'all' ? \"outlined\" : undefined}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC({id: todoList.id, newValue: \"all\"}))\n                        }}>All\n                </Button>\n                <Button color={todoList.filter === \"active\" ? \"secondary\" : \"default\"}\n                        variant={todoList.filter === 'active' ? \"outlined\" : undefined}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC({id: todoList.id, newValue: \"active\"}))\n                        }}>Active\n                </Button>\n                <Button color={todoList.filter === 'completed' ? \"secondary\" : \"default\"}\n                        variant={todoList.filter === 'completed' ? \"outlined\" : undefined}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC({id: todoList.id, newValue: \"completed\"}))\n                        }}>Completed\n                </Button>\n            </div>\n        </div>\n    )\n})\n\nexport default Todolist\n","import React, {useCallback, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {\n    changeFilterAC,\n    createTodoListTC,\n    FilterValuesType,\n    getTodoListsTC,\n    TodolistDomainType\n} from \"./TodoList/tl-reducer\";\nimport {deleteTaskTC, TaskStateType} from \"./TodoList/Task/tasks-reducer\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\nimport Todolist from \"./TodoList/Todolist\";\nimport { Redirect } from \"react-router-dom\";\n\n\nconst TodolistsList: React.FC = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\n    const todoLists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todoLists)\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        if (!isLoggedIn) {\n            return\n        }\n        dispatch(getTodoListsTC())\n    }, [])\n\n    const removeTask = useCallback((taskId: string, todoListID: string) => {\n        dispatch(deleteTaskTC({todolistId: todoListID, taskId: taskId}))\n    }, [dispatch])\n\n    const changeFilter = useCallback((newFilterValue: FilterValuesType, todoListID: string) => {\n        dispatch(changeFilterAC({id: todoListID, newValue: newFilterValue}))\n    }, [dispatch])\n\n\n    const createTodoList = useCallback((title: string) => {\n        dispatch(createTodoListTC(title))\n    }, [dispatch])\n\n    if (!isLoggedIn) {\n        return <Redirect to={'/login'} />\n    }\n\n    return (\n        <>\n            <Grid container style={{padding : \"30px 0\"}}>\n                <AddItemForm createItem={createTodoList}/>\n            </Grid>\n            <Grid container spacing={4}>\n                {\n                    todoLists.map(tl => {\n\n                        return <Grid item key={tl.id}>\n                            <Paper elevation={3} style={{padding : \"25px\"}}>\n                                <Todolist id={tl.id}\n                                          title={tl.title}\n                                          removeTask={removeTask}\n                                          changeFilter={changeFilter}\n                                          filter={tl.filter}\n                                          entityStatus={tl.entityStatus}\n                                />\n                            </Paper>\n                        </Grid>\n                    })}\n            </Grid>\n        </>\n    )\n}\n\nexport default TodolistsList;\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n    const dispatch = useDispatch()\n    let error = useSelector<AppRootStateType, string | null>((state) => state.app.error)\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC({error: null}))\n    }\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import {tasksReducer} from '../features/TodolistLists/TodoList/Task/tasks-reducer';\nimport {todoListReducer} from '../features/TodolistLists/TodoList/tl-reducer';\nimport {combineReducers} from 'redux';\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\nimport {appReducer} from \"./app-reducer\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\nimport {configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\nimport {useDispatch} from \"react-redux\";\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todoLists: todoListReducer,\n    app: appReducer,\n    auth: authReducer\n})\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\n})\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// @ts-ignore\nwindow.store = store;\n\nexport type AppDispatchType = typeof store.dispatch\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()\n","import React from 'react'\nimport {\n    Checkbox,\n    FormControl,\n    FormControlLabel,\n    FormGroup,\n    FormLabel,\n    TextField,\n    Button,\n    Box\n} from '@material-ui/core'\nimport {FormikHelpers, useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\nimport {useSelector} from \"react-redux\";\nimport {AppRootStateType, useAppDispatch} from \"../../app/store\";\nimport {Redirect} from 'react-router-dom';\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\ntype FormikValuesType = {\n    email: string\n    password: string\n    rememberMe: boolean\n}\n\nexport const Login = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\n    const dispatch = useAppDispatch()\n    const formik = useFormik({\n        initialValues : {\n            email : '',\n            password : '',\n            rememberMe : false\n        },\n        validate : (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required'\n            } else if (values.password.length < 3) {\n                errors.password = 'The password is too short'\n            }\n            return errors;\n        },\n        onSubmit : async (values: FormikValuesType, formikHelpers: FormikHelpers<FormikValuesType>) => {\n            const action = await dispatch(loginTC(values))\n\n            if (loginTC.rejected.match(action)) {\n                if(action.payload?.fieldsErrors?.length) {\n                    const error = action.payload?.fieldsErrors[0]\n                    formikHelpers.setFieldError(error.field, error.error)\n                }\n            }\n            formik.resetForm()\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'}/>\n    }\n\n    return (\n        <Box height={\"calc(100vh - 64px)\"} display=\"flex\" alignItems=\"center\" justifyContent={\"center\"}>\n                    <form onSubmit={formik.handleSubmit}>\n                        <FormControl>\n                            <FormLabel>\n                                <p>To log in get registered <span> </span>\n                                    <a href={'https://social-network.samuraijs.com/'}\n                                       target={'_blank'}>here\n                                    </a>\n                                </p>\n                                <p>or use common test account credentials:</p>\n                                <p>Email: free@samuraijs.com</p>\n                                <p>Password: free</p>\n                            </FormLabel>\n                            <FormGroup>\n                                <TextField\n                                    label=\"Email\"\n                                    margin=\"normal\"\n                                    {...formik.getFieldProps(\"email\")}\n                                />\n                                {formik.touched.email && formik.errors.email ?\n                                    <div style={{color : \"red\"}}>{formik.errors.email}</div> : null}\n                                <TextField\n                                    type=\"password\"\n                                    label=\"Password\"\n                                    margin=\"normal\"\n                                    {...formik.getFieldProps(\"password\")}\n                                />\n                                {formik.touched.password && formik.errors.password ?\n                                    <div style={{color : \"red\"}}>{formik.errors.password}</div> : null}\n                                <FormControlLabel\n                                    label={'Remember me'}\n                                    control={<Checkbox\n                                        {...formik.getFieldProps(\"rememberMe\")}\n                                    />}\n                                />\n                                <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                            </FormGroup>\n                        </FormControl>\n                    </form>\n        </Box>\n    )\n\n}\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress, makeStyles,\r\n    Toolbar, Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport TodolistsList from \"../features/TodolistLists/TodolistLists\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport { Route, Switch} from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    menuButton: {},\r\n    title: { menuButton: {\r\n            marginRight: theme.spacing(2),\r\n        },\r\n        flexGrow: 1,\r\n    },\r\n}));\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n    const classes = useStyles();\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <div className={classes.root}>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        {isLoggedIn && <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" className={classes.menuButton} >\r\n                            <Menu/>\r\n                        </IconButton>}\r\n                        <Typography variant=\"h6\" className={classes.title}>\r\n                            ToDo Lists\r\n                        </Typography>\r\n                        {isLoggedIn && <Button onClick={logout} color={\"inherit\"}>LOG OUT</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress />}\r\n                </AppBar>\r\n            </div>\r\n            <Container fixed style={{maxWidth: \"90%\"}}>\r\n                <Switch>\r\n                    <Route path={'/login'} render={() => <Login />} />\r\n                    <Route exact path={'/'} render={() => <TodolistsList />} />\r\n                    <Route path={'/todo_list_ts'} render={() => <TodolistsList />} />\r\n                    <Route path={'/404'} render={() => <h1>404: Page not found</h1>} />\r\n                    <Route path={'*'} render={() => <h1>404: Not found</h1>}/>\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter, HashRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <HashRouter>\r\n            <App />\r\n        </HashRouter>\r\n    </Provider>,  document.getElementById('root')\r\n\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}