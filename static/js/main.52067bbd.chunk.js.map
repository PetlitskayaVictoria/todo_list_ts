{"version":3,"sources":["serviceWorker.ts","api/todolist-api.ts","utils/error-utils.ts","features/Login/auth-reducer.ts","app/app-reducer.ts","features/TodolistLists/TodoList/tl-reducer.ts","features/TodolistLists/TodoList/Task/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistLists/TodoList/Task/Task.tsx","features/TodolistLists/TodoList/Todolist.tsx","features/TodolistLists/TodolistLists.tsx","components/ErrorSnackBar/ErrorSnackBar.tsx","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistAPI","todolistId","title","put","get","post","delete","tasksAPI","taskId","model","authAPI","params","handleServerAppError","data","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","authReducer","reducer","actions","isInitialized","setIsInitialized","appReducer","removeTodolistAC","index","findIndex","tl","id","splice","addTodolistAC","unshift","todoList","filter","entityStatus","changeTodolistTitleAC","changeFilterAC","newValue","setTodoListsAC","todoLists","map","changeTodolistEntityStatusAC","todoListReducer","removeTaskAC","tasks","todoListId","t","addTaskAC","task","updateTaskAC","domainModel","setTasksAC","changeTaskEntityStatusAC","extraReducers","builder","addCase","forEach","tasksReducer","deleteTaskTC","then","res","resultCode","catch","updateTaskTC","getState","find","apiModel","description","priority","startDate","deadline","finally","AddItemForm","React","memo","props","useState","setError","setTitle","createItem","trim","TextField","variant","onChange","event","currentTarget","onKeyPress","key","onBlur","helperText","label","disabled","IconButton","onClick","AddBox","EditableSpan","editMode","setEditMode","editModeOff","changeTitle","autoFocus","onDoubleClick","Task","useDispatch","changeStatus","useCallback","e","checked","Completed","New","changeTaskTitle","className","Checkbox","color","Delete","Todolist","useSelector","useEffect","items","allToDoListTasks","todoListTasks","createTask","item","addTaskTC","changeTodoListTitle","changeTodolistTitleTC","removeTodoList","Button","size","TodolistsList","auth","removeTask","todoListID","changeFilter","newFilterValue","createTodoList","createTodoListTC","Grid","container","style","padding","spacing","Paper","elevation","to","Alert","ErrorSnackbar","app","handleClose","reason","Snackbar","open","autoHideDuration","onClose","severity","Login","formik","useFormik","initialValues","email","password","rememberMe","validate","values","errors","test","onSubmit","resetForm","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.52067bbd.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import axios from 'axios';\n\nconst instance = axios.create({\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\n    withCredentials: true,\n    headers: {\n        'API-KEY': '9fa0e134-93f8-4f6c-b99f-9c479847d776'\n    }\n})\n\n// api\n\nexport const todolistAPI = {\n    updateTodolist(todolistId: string, title: string) {\n        return instance.put<ResponseType<{}>>(`todo-lists/${todolistId}`, {title})\n    },\n    getTodoLists() {\n        return instance.get<Array<TodolistType>>(`todo-lists`)\n    },\n    createTodolist(title: string) {\n        return instance.post<ResponseType<{item: TodolistType}>>(`todo-lists`, {title})\n    },\n    deleteTodolist(todolistId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}`)\n    }\n}\nexport const tasksAPI = {\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model)\n    },\n    getTasks(todolistId: string) {\n        return instance.get<GetTasksType>(`todo-lists/${todolistId}/tasks`)\n    },\n    createTask(todolistId: string, title: string) {\n        return instance.post<ResponseType<{item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title})\n    },\n    deleteTask(todolistId: string, taskId: string) {\n        return instance.delete<ResponseType<{}>>(`todo-lists/${todolistId}/tasks/${taskId}`)\n    }\n}\n\nexport const authAPI = {\n    login(params: LoginParamsType){\n        return instance.post<ResponseType<{userId: number}>>('auth/login', params)\n    },\n    me(){\n        return instance.get<ResponseType<{id: number, email: string, login: string}>>('auth/me')\n    },\n    logout(){\n        return instance.delete<ResponseType<{}>>('auth/login')\n    }\n}\n\n// types\n\nexport type TodolistType = {\n    id: string\n    addedDate: string\n    order: number\n    title: string\n}\nexport type ResponseType<D = {}> = {\n    resultCode: number\n    messages: Array<string>\n    data: D\n}\nexport enum TaskStatuses {\n    New = 0,\n    InProgress= 1,\n    Completed = 2,\n    Draft = 3\n}\nexport enum TaskPriorities {\n    Low = 0,\n    Middle = 1,\n    High = 2,\n    Urgently = 3,\n    Later = 4\n}\ntype TaskType= {\n    id: string\n    title: string\n    description: string\n    todoListId: string\n    order: number\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    addedDate: string\n}\ntype GetTasksType = {\n    items: Array<TaskType>\n    totalCount: number\n    error: string | null\n}\nexport type UpdateTaskModelType = {\n    title: string\n    description: string\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n}\n\nexport type LoginParamsType = {\n    email: string\n    password: string\n    rememberMe: boolean\n    captcha?: string\n}\n\n","import {setAppErrorAC, SetAppErrorACType, setAppStatusAC, SetAppStatusACType,} from '../app/app-reducer';\nimport { Dispatch } from 'redux';\n\nimport { ResponseType } from \"./../api/todolist-api\"\n\n\n// generic function\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: ErrorUtilsDispatchType) => {\n    if (data.messages.length) {\n        dispatch(setAppErrorAC({error: data.messages[0]}))\n    } else {\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\n    }\n    dispatch(setAppStatusAC({status: 'failed'}))\n}\n\nexport const handleServerNetworkError = (error: {message: string}, dispatch: ErrorUtilsDispatchType) => {\n    dispatch(setAppErrorAC({error: error.message}))\n    dispatch(setAppStatusAC({status: 'failed'}))\n}\n\ntype ErrorUtilsDispatchType = Dispatch<SetAppErrorACType | SetAppStatusACType>\n","import {Dispatch} from 'redux'\nimport {setAppStatusAC} from '../../app/app-reducer'\nimport {authAPI} from \"../../api/todolist-api\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nconst initialState = {\n    isLoggedIn : false\n}\n\nconst slice = createSlice({\n    name : \"auth\",\n    initialState : initialState,\n    reducers : {\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\n            {state.isLoggedIn = action.payload.value}\n        }\n    }\n})\n\nexport const authReducer = slice.reducer\n\nexport const {setIsLoggedInAC} = slice.actions\n// thunks\nexport const loginTC = (data: any) => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    authAPI.login(data).then((res) => {\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC({value : true}))\n            dispatch(setAppStatusAC({status: 'succeeded'}))\n        } else {\n            handleServerAppError(res.data, dispatch)\n        }\n    }).catch((error) => {\n        handleServerNetworkError(error, dispatch)\n    })\n}\nexport const logoutTC = () => (dispatch: Dispatch) => {\n    dispatch(setAppStatusAC({status: 'loading'}))\n    authAPI.logout()\n        .then(res => {\n            if (res.data.resultCode === 0) {\n                dispatch(setIsLoggedInAC({value : false}))\n                dispatch(setAppStatusAC({status: 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        })\n        .catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n}\n\n\n","import {authAPI} from \"../api/todolist-api\";\nimport {Dispatch} from \"redux\";\nimport {setIsLoggedInAC} from \"../features/Login/auth-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\n\nconst initialState: InitialStateType = {\n    status : 'idle',\n    error : null,\n    isInitialized : false\n}\n\ntype InitialStateType = {\n    status: RequestStatusType\n    error: string | null\n    isInitialized: boolean\n}\n\nconst slice = createSlice({\n    name: \"app\",\n    initialState: initialState,\n    reducers: {\n        setAppStatusAC(state, action: PayloadAction<{status: RequestStatusType}>) {\n            state.status = action.payload.status\n        },\n        setAppErrorAC(state, action: PayloadAction<{error: string | null}>) {\n            state.error = action.payload.error\n        },\n        setIsInitialized(state, action: PayloadAction<{isInitialized: boolean}>) {\n            state.isInitialized = action.payload.isInitialized\n        }\n    }\n})\nexport const appReducer = slice.reducer\nexport const {setAppStatusAC, setAppErrorAC, setIsInitialized} = slice.actions\n\nexport const initializeAppTC = () => (dispatch: Dispatch) => {\n    authAPI.me().then(res => {\n        if (res.data.resultCode === 0) {\n            dispatch(setIsLoggedInAC({value: true}));\n        } else {\n            handleServerAppError(res.data, dispatch)\n        }\n    }).catch((error) => {\n        handleServerNetworkError(error, dispatch)\n    }).finally(() => {\n        dispatch(setIsInitialized({isInitialized: true}))\n    })\n}\n\nexport type SetAppStatusACType = ReturnType<typeof setAppStatusAC>\nexport type SetAppErrorACType = ReturnType<typeof setAppErrorAC>\n\n","import {todolistAPI, TodolistType} from \"../../../api/todolist-api\";\nimport {Dispatch} from \"redux\";\nimport {\n    RequestStatusType,\n    setAppStatusAC,\n} from \"../../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nlet initialState: Array<TodolistDomainType> = []\n\nconst slice = createSlice({\n    name : \"todolists\",\n    initialState : initialState,\n    reducers : {\n        removeTodolistAC(state, action: PayloadAction<{ todolistId: string }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.todolistId)\n            if (index > -1) {\n                state.splice(index, 1)\n            }\n        },\n        addTodolistAC(state, action: PayloadAction<{ todoList: TodolistType }>) {\n            state.unshift({...action.payload.todoList, filter : \"all\", entityStatus : \"idle\"})\n        },\n        changeTodolistTitleAC(state, action: PayloadAction<{ title: string, id: string }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].title = action.payload.title\n        },\n        changeFilterAC(state, action: PayloadAction<{ id: string, newValue: FilterValuesType }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].filter = action.payload.newValue\n        },\n        setTodoListsAC(state, action: PayloadAction<{ todoLists: Array<TodolistType> }>) {\n            return action.payload.todoLists.map((tl) => ({...tl, filter : \"all\", entityStatus : 'idle'}))\n        },\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatusType }>) {\n            const index = state.findIndex(tl => tl.id === action.payload.id)\n            state[index].entityStatus = action.payload.entityStatus\n        },\n\n    }\n})\nexport const todoListReducer = slice.reducer\nexport const {removeTodolistAC, addTodolistAC, changeTodolistTitleAC, changeFilterAC, setTodoListsAC, changeTodolistEntityStatusAC} = slice.actions\n\n// thunks\n\nexport const getTodoListsTC = () =>\n    (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status : 'loading'}))\n        todolistAPI.getTodoLists().then((res) => {\n            dispatch(setTodoListsAC({todoLists: res.data}))\n            dispatch(setAppStatusAC({status : 'succeeded'}))\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n    }\nexport const createTodoListTC = (title: string) =>\n    (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status : 'loading'}))\n        todolistAPI.createTodolist(title).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(addTodolistAC({todoList: res.data.data.item}))\n                dispatch(setAppStatusAC({status : 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n    }\nexport const deleteTodoListTC = (todoListId: string) =>\n    (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status : 'loading'}))\n        dispatch(changeTodolistEntityStatusAC({id: todoListId, entityStatus: 'loading'}))\n        todolistAPI.deleteTodolist(todoListId).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(removeTodolistAC({todolistId: todoListId}))\n                dispatch(setAppStatusAC({status : 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n    }\nexport const changeTodolistTitleTC = (todoListId: string, title: string) =>\n    (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status : 'loading'}))\n        todolistAPI.updateTodolist(todoListId, title).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(changeTodolistTitleAC({title, id: todoListId}))\n                dispatch(setAppStatusAC({status : 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n    }\n\n// types\n\nexport type FilterValuesType = \"all\" | \"active\" | \"completed\"\nexport type TodolistDomainType = TodolistType & { filter: FilterValuesType, entityStatus: RequestStatusType }\n\n\n","import {\n    addTodolistAC,\n    removeTodolistAC,\n    setTodoListsAC,\n} from \"../tl-reducer\";\nimport {TaskPriorities, tasksAPI, TaskStatuses, UpdateTaskModelType} from \"../../../../api/todolist-api\";\nimport {AppRootStateType} from \"../../../../app/store\";\nimport {Dispatch} from \"redux\";\nimport {\n    RequestStatusType,\n    setAppStatusAC\n} from \"../../../../app/app-reducer\";\nimport {handleServerAppError, handleServerNetworkError} from \"../../../../utils/error-utils\";\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\n\nexport type TaskStateType = {\n    [key: string]: Array<TaskDomainType>\n}\nlet initialState: TaskStateType = {}\n\nconst slice = createSlice({\n    name : \"tasks\",\n    initialState : initialState,\n    reducers : {\n        removeTaskAC(state, action: PayloadAction<{ taskId: string, todoListId: string }>) {\n            const tasks = state[action.payload.todoListId]\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\n            if (index > - 1) {\n                tasks.splice(index, 1)\n            }\n        },\n        addTaskAC(state, action: PayloadAction<{ task: TaskType }>) {\n            state[action.payload.task.todoListId].unshift({...action.payload.task, entityStatus : 'idle'})\n        },\n        updateTaskAC(state, action: PayloadAction<{ taskId: string, domainModel: UpdateDomainTaskModelType, todoListId: string }>) {\n            const tasks = state[action.payload.todoListId]\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\n            if (index > - 1) {\n                tasks[index] = {...tasks[index], ...action.payload.domainModel}\n            }\n        },\n        setTasksAC(state, action: PayloadAction<{ todoListId: string, tasks: Array<TaskType> }>) {\n\n            state[action.payload.todoListId] = action.payload.tasks.map((t) => {\n                return {...t, entityStatus : 'idle'}\n            })\n        },\n        changeTaskEntityStatusAC(state, action: PayloadAction<{ taskId: string, todoListId: string, entityStatus: RequestStatusType }>) {\n            const tasks = state[action.payload.todoListId]\n            const index = tasks.findIndex(t => t.id === action.payload.taskId)\n            if (index > - 1) {\n                tasks[index].entityStatus = action.payload.entityStatus\n            }\n        }\n    },\n    extraReducers : (builder) => {\n        builder.addCase(addTodolistAC, (state, action) => {\n            state[action.payload.todoList.id] = []\n        });\n        builder.addCase(removeTodolistAC, (state, action) => {\n            delete state[action.payload.todolistId]\n        });\n        builder.addCase(setTodoListsAC, (state, action) => {\n            action.payload.todoLists.forEach((tl) => state[tl.id] = [])\n        });\n\n    }\n})\nexport const tasksReducer = slice.reducer\nexport const {removeTaskAC, addTaskAC, updateTaskAC, setTasksAC, changeTaskEntityStatusAC} = slice.actions\n\n// thunks\n\nexport const getTasksTC = (todolistId: string) =>\n    (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status : 'loading'}))\n        tasksAPI.getTasks(todolistId).then((res) => {\n            dispatch(setTasksAC({todoListId : todolistId, tasks : res.data.items}))\n            dispatch(setAppStatusAC({status : 'succeeded'}))\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n    }\nexport const deleteTaskTC = (todolistId: string, taskId: string) =>\n    (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status : 'loading'}))\n        dispatch(changeTaskEntityStatusAC({taskId, todoListId : todolistId, entityStatus : \"loading\"}))\n        tasksAPI.deleteTask(todolistId, taskId).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(removeTaskAC({taskId, todoListId : todolistId}))\n                dispatch(setAppStatusAC({status : 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n    }\nexport const addTaskTC = (todolistId: string, title: string) =>\n    (dispatch: Dispatch) => {\n        dispatch(setAppStatusAC({status : 'loading'}))\n        tasksAPI.createTask(todolistId, title).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(addTaskAC({task : res.data.data.item}))\n                dispatch(setAppStatusAC({status : 'succeeded'}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        })\n    }\nexport const updateTaskTC = (todolistId: string, taskId: string, domainModel: UpdateDomainTaskModelType) =>\n    (dispatch: Dispatch, getState: () => AppRootStateType) => {\n        const state = getState()\n        const task = state.tasks[todolistId].find((t) => t.id === taskId)\n        if (!task) {\n            return\n        }\n\n        const apiModel: UpdateTaskModelType = {\n            title : task.title,\n            description : task.description,\n            status : task.status,\n            priority : task.priority,\n            startDate : task.startDate,\n            deadline : task.deadline,\n            ...domainModel\n        }\n        dispatch(setAppStatusAC({status : 'loading'}))\n        dispatch(changeTaskEntityStatusAC({taskId, todoListId : todolistId, entityStatus : \"loading\"}))\n        tasksAPI.updateTask(todolistId, taskId, apiModel).then((res) => {\n            if (res.data.resultCode === 0) {\n                dispatch(updateTaskAC({taskId, domainModel, todoListId : todolistId}))\n            } else {\n                handleServerAppError(res.data, dispatch)\n            }\n\n        }).catch((error) => {\n            handleServerNetworkError(error, dispatch)\n        }).finally(() => {\n            dispatch(setAppStatusAC({status : 'succeeded'}))\n            dispatch(changeTaskEntityStatusAC({taskId, todoListId : todolistId, entityStatus : \"succeeded\"}))\n        })\n    }\n\n// types\n\nexport type UpdateDomainTaskModelType = {\n    title?: string\n    description?: string\n    status?: TaskStatuses\n    priority?: TaskPriorities\n    startDate?: string\n    deadline?: string\n}\nexport type TaskType = {\n    id: string\n    title: string\n    description: string\n    todoListId: string\n    order: number\n    status: TaskStatuses\n    priority: TaskPriorities\n    startDate: string\n    deadline: string\n    addedDate: string\n}\nexport type TaskDomainType = TaskType & { entityStatus: RequestStatusType }\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {IconButton, TextField} from \"@material-ui/core\";\nimport {AddBox} from \"@material-ui/icons\";\n\nexport type AddItemFormType = {\n    createItem: (title: string) => void\n    disabled?: boolean\n}\n\nconst AddItemForm = React.memo((props: AddItemFormType) =>  {\n    const [error, setError] = useState<string | null>(null)\n    const [title, setTitle] = useState<string>(\"\")\n\n    const createItem = () => {\n        if (title.trim()) {\n            props.createItem(title)\n            setTitle(\"\")\n        } else {\n            setTitle(\"\")\n            setError(\"Name is required\")\n        }\n    }\n\n    const changeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n        // setError(null)\n    }\n    const onKeyPressAddTask = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (error !== null) setError(null)\n        if (event.key === \"Enter\") createItem()\n    }\n\n    return (\n        <div>\n            <TextField variant={\"outlined\"}\n                       value={title}\n                       onChange={changeInputValue}\n                       onKeyPress={onKeyPressAddTask}\n                       onBlur={() => {setError(null)}}\n                       helperText={error ? \"Name is required\" : \"\"}\n                       label={\"Title\"}\n                       error={!!error}\n                       disabled={props.disabled}\n            />\n\n            <IconButton onClick={createItem}>\n                <AddBox/>\n            </IconButton>\n        </div>\n    )\n})\n\nexport default AddItemForm;\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\nimport {TextField} from \"@material-ui/core\";\n\nexport type EditableSpanType = {\n    title: string\n    changeTitle: (title: string) => void\n    disabled?: boolean\n}\n\nconst EditableSpan = React.memo((props: EditableSpanType) => {\n    const [editMode, setEditMode] = useState<boolean>(false)\n    const [title, setTitle] = useState<string>(props.title)\n    const editModeOn = () => {\n        setEditMode(true)\n    }\n    const editModeOff = () => {\n        props.changeTitle(title)\n        setEditMode(false)\n    }\n\n    const saveOnClick = (event: KeyboardEvent<HTMLInputElement>) => {\n        if (event.key === \"Enter\") {\n            editModeOff()\n        }\n    }\n\n    const changeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n        setTitle(event.currentTarget.value)\n    }\n\n\n    return (\n        editMode && !props.disabled ? <TextField\n                value={title}\n                onChange={changeInputValue}\n                onBlur={editModeOff}\n                autoFocus={true}\n                onKeyPress={saveOnClick}/>\n            :\n            <span onDoubleClick={editModeOn}>{props.title}</span>\n    )\n})\n\nexport default EditableSpan\n","import React, {ChangeEvent, useCallback} from \"react\";\nimport {\n    deleteTaskTC, updateTaskTC\n} from \"./tasks-reducer\";\nimport {Checkbox, IconButton} from \"@material-ui/core\";\nimport EditableSpan from \"../../../../components/EditableSpan/EditableSpan\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch} from \"react-redux\";\nimport {TaskStatuses} from \"../../../../api/todolist-api\";\nimport {RequestStatusType} from \"../../../../app/app-reducer\";\n\nexport type TaskPropsType = {\n    id: string\n    todoListId: string\n    title: string\n    entityStatus: RequestStatusType\n    status: TaskStatuses\n}\n\nconst Task = React.memo((props: TaskPropsType) => {\n    const dispatch = useDispatch()\n    const removeTask = () => {\n        dispatch(deleteTaskTC(props.todoListId, props.id))\n    }\n\n    const changeStatus = useCallback((e: ChangeEvent<HTMLInputElement>) => {\n        let status = e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New\n\n        dispatch(updateTaskTC(props.todoListId, props.id, {status}))\n    }, [dispatch, props.id, props.todoListId])\n\n    const changeTaskTitle = useCallback((title: string) => {\n        dispatch(updateTaskTC(props.todoListId, props.id, {title}))\n    }, [dispatch, props.id, props.todoListId])\n\n    return (\n        <div className={props.status === TaskStatuses.Completed ? \"isDone\" : \"\"}>\n            <Checkbox checked={props.status === TaskStatuses.Completed}\n                      onChange={changeStatus}\n                      color={\"secondary\"}\n                      disabled={props.entityStatus === 'loading'}\n            ></Checkbox>\n            <EditableSpan title={props.title}\n                          changeTitle={changeTaskTitle}\n                          disabled={props.entityStatus === 'loading'}\n            />\n            <IconButton onClick={removeTask} disabled={props.entityStatus === 'loading'}>\n                <Delete />\n            </IconButton>\n        </div>\n    )\n})\n\nexport default Task\n","import React, {useCallback, useEffect} from \"react\";\nimport AddItemForm from \"../../../components/AddItemForm/AddItemForm\";\nimport EditableSpan from \"../../../components/EditableSpan/EditableSpan\";\nimport {Button, IconButton} from \"@material-ui/core\";\nimport {Delete} from \"@material-ui/icons\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../../app/store\";\nimport {addTaskTC, getTasksTC, TaskDomainType, TaskType} from \"./Task/tasks-reducer\";\nimport {\n    changeFilterAC,\n    changeTodolistTitleTC, deleteTodoListTC,\n    FilterValuesType,\n    TodolistDomainType\n} from \"./tl-reducer\";\nimport Task from \"./Task/Task\";\nimport {TaskStatuses} from \"../../../api/todolist-api\";\nimport {RequestStatusType} from \"../../../app/app-reducer\";\n\ntype TodoListPropsType = {\n    id: string\n    title: string\n    filter: FilterValuesType\n    entityStatus: RequestStatusType\n    removeTask: (taskId: string, todoListID: string) => void\n    changeFilter: (newFilterValue: FilterValuesType, todoListID: string) => void\n}\n\nconst Todolist = React.memo((props: TodoListPropsType) => {\n\n    let todoList = useSelector<AppRootStateType, TodolistDomainType>(state => state.todoLists.filter(tl => tl.id === props.id)[0])\n    let tasks = useSelector<AppRootStateType, TaskDomainType[]>(state => state.tasks[props.id])\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(getTasksTC(props.id))\n    }, [])\n\n    let allToDoListTasks = tasks;\n    let todoListTasks = allToDoListTasks;\n    if (props.filter === \"active\") {\n        todoListTasks = allToDoListTasks.filter(t => t.status !== TaskStatuses.Completed)\n    } else if (props.filter === \"completed\") {\n        todoListTasks = allToDoListTasks.filter(t => t.status === TaskStatuses.Completed)\n    }\n\n    const createTask = useCallback((title: string) => {\n        dispatch(addTaskTC(todoList.id, title))\n    }, [dispatch])\n\n    const changeTodoListTitle = useCallback((title: string) => {\n        dispatch(changeTodolistTitleTC(todoList.id, title))\n    }, [dispatch])\n\n    const removeTodoList = useCallback(() => {\n        dispatch(deleteTodoListTC(todoList.id))\n    }, [dispatch])\n\n    return (\n        <div>\n            <h3><EditableSpan title={todoList.title} changeTitle={changeTodoListTitle}/>\n                <IconButton onClick={removeTodoList} disabled={props.entityStatus === 'loading'}>\n                    <Delete/>\n                </IconButton>\n            </h3>\n            <AddItemForm createItem={createTask} disabled={props.entityStatus === 'loading'}/>\n            <div>\n                {todoListTasks.map(t => {\n                    return <Task key={t.id}\n                                 id={t.id}\n                                 todoListId={props.id}\n                                 title={t.title}\n                                 status={t.status}\n                                 entityStatus={t.entityStatus}\n                    />\n                })}\n            </div>\n            <div>\n                <Button color={todoList.filter === 'all' ? \"primary\" : \"default\"}\n                        variant={\"contained\"}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC({id: todoList.id, newValue: \"all\"}))\n                        }}>All\n                </Button>\n                <Button color={todoList.filter === \"active\" ? \"primary\" : \"default\"}\n                        variant={\"contained\"}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC({id: todoList.id, newValue: \"active\"}))\n                        }}>Active\n                </Button>\n                <Button color={todoList.filter === 'completed' ? \"primary\" : \"default\"}\n                        variant={\"contained\"}\n                        size={\"small\"}\n                        onClick={() => {\n                            dispatch(changeFilterAC({id: todoList.id, newValue: \"completed\"}))\n                        }}>Completed\n                </Button>\n            </div>\n        </div>\n    )\n})\n\nexport default Todolist\n","import React, {useCallback, useEffect} from \"react\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {\n    changeFilterAC,\n    createTodoListTC,\n    FilterValuesType,\n    getTodoListsTC,\n    TodolistDomainType\n} from \"./TodoList/tl-reducer\";\nimport {deleteTaskTC, TaskStateType} from \"./TodoList/Task/tasks-reducer\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport AddItemForm from \"../../components/AddItemForm/AddItemForm\";\nimport Todolist from \"./TodoList/Todolist\";\nimport { Redirect } from \"react-router-dom\";\n\n\nconst TodolistsList: React.FC = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\n    const todoLists = useSelector<AppRootStateType, TodolistDomainType[]>(state => state.todoLists)\n    const tasks = useSelector<AppRootStateType, TaskStateType>(state => state.tasks)\n\n    const dispatch = useDispatch()\n    useEffect(() => {\n        if (!isLoggedIn) {\n            return\n        }\n        dispatch(getTodoListsTC())\n    }, [])\n\n    const removeTask = useCallback((taskId: string, todoListID: string) => {\n        dispatch(deleteTaskTC(todoListID, taskId))\n    }, [dispatch])\n\n    const changeFilter = useCallback((newFilterValue: FilterValuesType, todoListID: string) => {\n        dispatch(changeFilterAC({id: todoListID, newValue: newFilterValue}))\n    }, [dispatch])\n\n\n    const createTodoList = useCallback((title: string) => {\n        dispatch(createTodoListTC(title))\n    }, [dispatch])\n\n    if (!isLoggedIn) {\n        return <Redirect to={'/login'} />\n    }\n\n    return (\n        <>\n            <Grid container style={{padding : \"30px 0\"}}>\n                <AddItemForm createItem={createTodoList}/>\n            </Grid>\n            <Grid container spacing={4}>\n                {\n                    todoLists.map(tl => {\n\n                        return <Grid item key={tl.id}>\n                            <Paper elevation={3} style={{padding : \"25px\"}}>\n                                <Todolist id={tl.id}\n                                          title={tl.title}\n                                          removeTask={removeTask}\n                                          changeFilter={changeFilter}\n                                          filter={tl.filter}\n                                          entityStatus={tl.entityStatus}\n                                />\n                            </Paper>\n                        </Grid>\n                    })}\n            </Grid>\n        </>\n    )\n}\n\nexport default TodolistsList;\n","import React from 'react'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport {setAppErrorAC} from \"../../app/app-reducer\";\n\nfunction Alert(props: AlertProps) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\n}\n\nexport function ErrorSnackbar() {\n    const dispatch = useDispatch()\n    let error = useSelector<AppRootStateType, string | null>((state) => state.app.error)\n\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return\n        }\n        dispatch(setAppErrorAC({error: null}))\n    }\n\n    return (\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\n            <Alert onClose={handleClose} severity=\"error\">\n                {error}\n            </Alert>\n        </Snackbar>\n    )\n}\n","import React from 'react'\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\nimport {useFormik} from \"formik\";\nimport {loginTC} from \"./auth-reducer\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {AppRootStateType} from \"../../app/store\";\nimport { Redirect } from 'react-router-dom';\n\ntype FormikErrorType = {\n    email?: string\n    password?: string\n    rememberMe?: boolean\n}\n\nexport const Login = () => {\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\n    const dispatch = useDispatch()\n    const formik = useFormik({\n        initialValues: {\n            email: '',\n            password: '',\n            rememberMe: false\n        },\n        validate: (values) => {\n            const errors: FormikErrorType = {};\n            if (!values.email) {\n                errors.email = 'Required';\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n                errors.email = 'Invalid email address';\n            }\n            if (!values.password) {\n                errors.password = 'Required'\n            } else if (values.password.length < 3) {\n                errors.password = 'The password is too short'\n            }\n            return errors;\n        },\n        onSubmit: values => {\n            formik.resetForm()\n            dispatch(loginTC(values))\n        },\n    })\n\n    if (isLoggedIn) {\n        return <Redirect to={'/'} />\n    }\n\n    return <Grid container justify=\"center\">\n        <Grid item xs={4}>\n            <form onSubmit={formik.handleSubmit}>\n                <FormControl>\n                    <FormLabel>\n                        <p>To log in get registered\n                            <a href={'https://social-network.samuraijs.com/'}\n                               target={'_blank'}>here\n                            </a>\n                        </p>\n                        <p>or use common test account credentials:</p>\n                        <p>Email: free@samuraijs.com</p>\n                        <p>Password: free</p>\n                    </FormLabel>\n                    <FormGroup>\n                        <TextField\n                            label=\"Email\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"email\")}\n                        />\n                        {formik.touched.email && formik.errors.email ? <div style={{color: \"red\"}}>{formik.errors.email}</div> : null}\n                        <TextField\n                            type=\"password\"\n                            label=\"Password\"\n                            margin=\"normal\"\n                            {...formik.getFieldProps(\"password\")}\n                        />\n                        {formik.touched.password && formik.errors.password ? <div style={{color: \"red\"}}>{formik.errors.password}</div> : null}\n                        <FormControlLabel\n                            label={'Remember me'}\n                            control={<Checkbox\n                                {...formik.getFieldProps(\"rememberMe\")}\n                            />}\n                        />\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\n                    </FormGroup>\n                </FormControl>\n            </form>\n        </Grid>\n    </Grid>\n}\n","import React, {useEffect} from 'react';\r\nimport './App.css';\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from \"@material-ui/core\";\r\nimport {Menu} from \"@material-ui/icons\";\r\nimport TodolistsList from \"../features/TodolistLists/TodolistLists\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"./store\";\r\nimport {initializeAppTC, RequestStatusType} from \"./app-reducer\";\r\nimport {ErrorSnackbar} from \"../components/ErrorSnackBar/ErrorSnackBar\";\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport {Login} from \"../features/Login/Login\";\r\nimport {logoutTC} from \"../features/Login/auth-reducer\";\r\n\r\nfunction App() {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>((state) => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logout = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar />\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Button color=\"inherit\">Login</Button>\r\n                    {isLoggedIn ? <Button onClick={logout}>LOG OUT</Button> : null}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress />}\r\n            </AppBar>\r\n            <Container fixed>\r\n                <Switch>\r\n                    <Route exact path={'/'} render={() => <TodolistsList />} />\r\n                    <Route path={'/login'} render={() => <Login />} />\r\n                    <Route path={'/404'} render={() => <h1>404: Page not found</h1>} />\r\n                </Switch>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import {tasksReducer} from '../features/TodolistLists/TodoList/Task/tasks-reducer';\nimport {todoListReducer} from '../features/TodolistLists/TodoList/tl-reducer';\nimport {combineReducers} from 'redux';\nimport thunkMiddleware, {ThunkAction} from 'redux-thunk'\nimport {appReducer} from \"./app-reducer\";\nimport {authReducer} from \"../features/Login/auth-reducer\";\nimport {configureStore, getDefaultMiddleware} from \"@reduxjs/toolkit\";\nconst rootReducer = combineReducers({\n    tasks: tasksReducer,\n    todoLists: todoListReducer,\n    app: appReducer,\n    auth: authReducer\n})\n\nexport const store = configureStore({\n    reducer: rootReducer,\n    middleware: (getDefaultMiddleware) => getDefaultMiddleware().prepend(thunkMiddleware)\n})\n\nexport type AppRootStateType = ReturnType<typeof rootReducer>\n\n// @ts-ignore\nwindow.store = store;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./app/App\";\r\nimport { Provider } from 'react-redux';\r\nimport {store} from \"./app/store\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <BrowserRouter>\r\n            <App />\r\n        </BrowserRouter>\r\n    </Provider>,  document.getElementById('root')\r\n\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}